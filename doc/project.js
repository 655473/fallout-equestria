var project = {"name":"Fallout: Equestria RPG","desc":{"homepage":"<p>\n  <h5>Overview</h5>\n  This is the Game Engine used for the development of Fallout: Equestria RPG.<br />\n  It aims at providing any feature that might be needed for easy development of classical RPGs like Black Isle Studio used to do them,\n  while using 3D graphics.<br />\n  The Game Engine also comes with a Game Editor which is not documented here (this is the technical documentaiton of the Game Engine, aimed at\n  developers only).\n</p>\n<p>\n  <h5>Getting started</h5>\n  <p>\n    The main loop is probably the best place to get started if you need to study the game's architecture.<br />\n    The classes handling the main loop are respectively:<br />\n    <ul>\n      <li>[MainMenu]</li>\n      <li>[NewGameTask] <i>Task executed when the user is in the New Game context</i></li>\n      <li>[GameTask]    <i>Task executed when the user is playing the game</i>\n        <ul>\n          <li>[WorldMap] <i>Task executed when the user is exploring the worldmap</i></li>\n          <li>[Level]    <i>Task executed when the user is in a loaded map</i></li>\n        </ul>\n      </li>\n    </ul>\n  </p>\n</p>\n<p>\n  <h5>Methodology</h5>\n  <h6>Event driven development</h6>\n  <p>\n    The Game Engine core is event-driven: that is to say, as a developer, instead of handling things through a main\n    loop, you would rather use callbacks.<br />\n    With such a huge code-base, it allows us to avoid fragmentation of code, making it much easier to read.<br />\n    The templated object Sync::Signal which you will very often see is handling these behaviors. Here's a use sample:\n    <pre class='sh_cpp'>\nint main(void)\n{\n  Sync::Signal<void (int)> SignalObject; // Declaring a signal. Observers will take an int as parameter.\n\n  // Connecting the following lambda to the signal. Connect can also take function pointers or method pointers.\n  SignalObject.Connect([](int param)\n  {\n    std::cout << \"SignalObject was emitted with parameter \" << param << std::endl;\n  });\n  SignalObject.Emit(42); // Executes all the observers\n  return (0);\n}</pre>\n  </p>\n  <h6>Formatting convention</h6>\n  <p>\n    Developers are free of using their own convention for their own code.<br />\n    However, methods and signals names MUST use upper camel case (ThisIsCamelCase).<br />\n    <br />\n    Though you might use any convention you're comfortable with, here's a list of what you SHOULD use to keep the formating coherent:<br />\n    <ul>\n      <li>2-spaces wide soft-tabs are preffered.</li>\n      <li>Line return before and after braces</li>\n      <li>One-liners do not use braces</li>\n      <li>Private attributes names are prefixed with an underscore</li>\n      <li>Attributes name either use either lower camel case or snake case (thisIsLowerCamelCase, this_is_snake_case)</li>\n    </ul>\n  </p>\n</p>\n"},"typedefs":[{"name":"EntryZone","to":"Zone","visibility":"public"},{"name":"dirent","to":"struct","visibility":"public"},{"name":"DivideAndConquer::Graph::Positions","to":"std::vector<POS>","visibility":"public"},{"name":"DivideAndConquer::Graph::Initializer","to":"std::function<Positions (const std::vector<T*>&)>","visibility":"public"},{"name":"DivideAndConquer::Graph::Heuristic","to":"std::function<float (POS, POS)>","visibility":"public"},{"name":"Waypoint::Arcs","to":"std::list<Arc>","visibility":"public"},{"name":"Waypoint::ArcsWithdrawed","to":"std::vector<std::pair<Arc, unsigned short> >","visibility":"public"},{"name":"World::Waypoints","to":"std::vector<Waypoint>","visibility":"public"},{"name":"World::MapObjects","to":"std::list<MapObject>","visibility":"public"},{"name":"World::DynamicObjects","to":"std::list<DynamicObject>","visibility":"public"},{"name":"World::WorldLights","to":"std::list<WorldLight>","visibility":"public"},{"name":"World::ExitZones","to":"std::list<ExitZone>","visibility":"public"},{"name":"World::EntryZones","to":"std::list<EntryZone>","visibility":"public"},{"name":"World::Floors","to":"std::vector<NodePath>","visibility":"public"},{"name":"World::ProgressCallback","to":"std::function<void (const std::string&, float)>","visibility":"public"},{"name":"Sync::ObserverId","to":"void*","visibility":"public"},{"name":"Sync::Semaphore::ThreadId","to":"std::thread::id","visibility":"private"},{"name":"Sync::Semaphore::ThreadId","to":"DWORD","visibility":"private"},{"name":"Sync::Signal::Observers","to":"std::list<InterfaceObserver*>","visibility":"private"},{"name":"Sync::Signal::RecordedCalls","to":"std::queue<RecordedCall>","visibility":"public"},{"name":"Sync::Signal::FunctionObserver::Function","to":"std::function<void (void)>","visibility":"public"},{"name":"Sync::Signal::Observer::","to":"void","visibility":"public"},{"name":"Sync::ObserverHandler::Observers","to":"std::list<IObserverPair*>","visibility":"private"},{"name":"Party::DynamicObjects","to":"std::list<DynamicObject*>","visibility":"public"},{"name":"Party::Statsheets","to":"std::map<std::string, std::string>","visibility":"public"},{"name":"PlayerParty::DynamicObjects","to":"std::list<DynamicObject*>","visibility":"public"},{"name":"TimeManager::Tasks","to":"std::list<Task*>","visibility":"public"},{"name":"DataBranch::Children","to":"std::list<DataBranch*>","visibility":"public"},{"name":"Data::Children","to":"DataBranch::Children","visibility":"public"},{"name":"AnimatedObject::MapAnims","to":"std::map<std::string, AnimControl*>","visibility":"protected"},{"name":"WaypointModifier::WithdrawedArcs","to":"std::list<WithdrawedArc>","visibility":"private"},{"name":"InstanceDynamicObject::InteractionList","to":"std::list<Interaction>","visibility":"public"},{"name":"Script::ModuleManager::Modules","to":"std::list<LoadedModule>","visibility":"private"},{"name":"UiBase::Listeners","to":"std::list<Listener>","visibility":"private"},{"name":"InventoryObject::ActionsHooks","to":"std::vector<ActionHooks>","visibility":"private"},{"name":"Inventory::Content","to":"std::list<InventoryObject*>","visibility":"public"},{"name":"Scriptable::ScriptFuncPtr","to":"std::pair<asIScriptFunction**, std::string>","visibility":"protected"},{"name":"Scriptable::ScriptFuncPtrs","to":"std::list<ScriptFuncPtr>","visibility":"protected"},{"name":"AngelScript::Object::Functions","to":"std::map<std::string, Function>","visibility":"private"},{"name":"Sync::FunctorThreadFoo::","to":"void","visibility":"public"},{"name":"LoadingScreen::StringQueue","to":"std::queue<std::string>","visibility":"private"},{"name":"SoundManager::Sounds","to":"std::list<Sound>","visibility":"private"},{"name":"SoundManager::SoundsIterators","to":"std::list<Sounds::iterator>","visibility":"private"},{"name":"SoundManager::SoundInstances","to":"std::list<ISampleInstance*>","visibility":"private"},{"name":"SoundManager::SoundManagers","to":"std::list<SoundManager*>","visibility":"private"},{"name":"Level::InstanceObjects","to":"std::list<InstanceDynamicObject*>","visibility":"private"},{"name":"Level::Characters","to":"std::list<ObjectCharacter*>","visibility":"private"},{"name":"Level::ExitZones","to":"std::list<LevelExitZone*>","visibility":"private"},{"name":"DialogAnswers::KeyValue","to":"std::pair<std::string, std::string>","visibility":"public"},{"name":"DialogAnswers::AnswerList","to":"std::list<KeyValue>","visibility":"public"},{"name":"ChatterManager::TextBoxes","to":"std::list<Text>","visibility":"private"},{"name":"InteractMenu::Listeners","to":"std::vector<InstanceDynamicObject::Interaction*>","visibility":"private"},{"name":"InteractMenu::Buttons","to":"std::vector<Rocket::Core::Element*>","visibility":"private"},{"name":"WorldDiplomacy::Factions","to":"std::list<Faction>","visibility":"public"},{"name":"WorldMap::Cities","to":"std::vector<City>","visibility":"private"},{"name":"WorldMap::Cases","to":"std::vector<Rocket::Core::Element*>","visibility":"private"},{"name":"Directory::Entries","to":"std::list<Dirent>","visibility":"public"},{"name":"Pipbuck::AppList","to":"std::list<App*>","visibility":"private"},{"name":"BuffManager::Buffs","to":"std::list<Buff*>","visibility":"public"},{"name":"MainMenu::Alerts","to":"std::list<AlertUi*>","visibility":"private"},{"name":"AstarPathfinding::NodeList","to":"std::vector<Node*>","visibility":"public"},{"name":"AstarPathfinding::std::vector<Node*>::iterator","to":"typename","visibility":"public"},{"name":"Quest::","to":"void","visibility":"private"},{"name":"QuestManager::Quests","to":"std::list<Quest*>","visibility":"private"},{"name":"Executor::Lambdas","to":"std::queue<std::function<void (void)> >","visibility":"private"},{"name":"UiDialog::Buttons","to":"std::list<Button>","visibility":"private"}],"types":[{"visibility":"public","name":"Utils::Serializable","decl":"struct","file":"include/level/world.h","namespaces":["Utils"],"constructors":[],"methods":[{"name":"Serialize","params":"(Packet&)","attrs":68,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unserialize","params":"(Packet&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Interface for declaring objects that can be passed through the [Packet] serializer.\n","detail":null}},{"visibility":"public","name":"Utils::Packet","decl":"class","file":"include/level/world.h","namespaces":["Utils"],"constructors":[],"methods":[{"name":"Packet","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Packet","params":"(std::ifstream&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Packet","params":"(char* raw, size_t size, bool duplicate = true)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Packet","params":"(const char* raw, size_t size)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Packet","params":"(const Packet& cpy)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Packet","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"raw","params":"(void)","attrs":4,"return_type":"char","visibility":"public","return_attrs":5,"doc":null},{"name":"size","params":"(void)","attrs":4,"return_type":"size_t","visibility":"public","return_attrs":0,"doc":null},{"name":"PrintContent","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PrintRawContent","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator=","params":"(const Packet& cpy)","attrs":0,"return_type":"Packet","visibility":"public","return_attrs":2,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Object for packing in / packing out objects in a serializable fashion.\n","detail":null}},{"visibility":"public","name":"Utils","decl":"namespace","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"DivideAndConquer::Graph::NodeException","decl":"struct","file":"include/level/world.h","namespaces":["DivideAndConquer","Graph"],"constructors":[],"methods":[{"name":"what","params":"()","attrs":68,"return_type":"char","visibility":"public","return_attrs":5,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"std::exception"}],"doc":null},{"visibility":"public","name":"DivideAndConquer::Graph::Node","decl":"struct","file":"include/level/world.h","namespaces":["DivideAndConquer","Graph"],"constructors":[],"methods":[{"name":"~Node","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetEntries","params":"(POS position_from, Heuristic heuristic)","attrs":68,"return_type":"std::vector<T*>","visibility":"public","return_attrs":6,"doc":null},{"name":"FindBestNode","params":"(POS position_from, Heuristic heuristic)","attrs":4,"return_type":"Node","visibility":"public","return_attrs":5,"doc":null},{"name":"FindBestNode","params":"(POS position_from, Heuristic heuristic)","attrs":0,"return_type":"Node","visibility":"public","return_attrs":1,"doc":null},{"name":"Initialize","params":"(Heuristic heuristic, Initializer initializer, unsigned short max_per_node)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"position","type":"POS","attrs":0,"visibility":"public","doc":null},{"name":"nodes","type":"std::vector<Node*>","attrs":0,"visibility":"public","doc":null},{"name":"entries","type":"std::vector<T*>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"DivideAndConquer::Graph::FinalNode","decl":"struct","file":"include/level/world.h","namespaces":["DivideAndConquer","Graph"],"constructors":[],"methods":[{"name":"GetEntries","params":"(POS position_from, Heuristic heuristic)","attrs":68,"return_type":"std::vector<T*>","visibility":"public","return_attrs":6,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Node"}],"doc":null},{"visibility":"public","name":"DivideAndConquer::Graph","decl":"class","file":"include/level/world.h","namespaces":["DivideAndConquer"],"constructors":[],"methods":[{"name":"SetHeuristic","params":"(Heuristic heuristic)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Initialize","params":"(const std::vector<T*>& entries, Initializer initializer, unsigned short max_per_node = 100)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetClosest","params":"(POS position)","attrs":0,"return_type":"T","visibility":"public","return_attrs":1,"doc":null}],"attributes":[{"name":"Entries","type":"std::vector<T*>","attrs":0,"visibility":"public","doc":null},{"name":"heuristic","type":"Heuristic","attrs":0,"visibility":"public","doc":null},{"name":"node_tree","type":"Node","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"DivideAndConquer","decl":"namespace","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"ColMask","decl":"namespace","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Waypoint::ArcObserver","decl":"struct","file":"include/level/world.h","namespaces":["Waypoint"],"constructors":[],"methods":[{"name":"CanGoThrough","params":"(unsigned char type)","attrs":64,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GoingThrough","params":"(void*)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"An interface that allows to the implementation to be warned when a character is passing\nthrough it and/or to forbid them to pass.\n","detail":null}},{"visibility":"public","name":"Waypoint::Arc","decl":"struct","file":"include/level/world.h","namespaces":["Waypoint"],"constructors":[],"methods":[{"name":"Arc","params":"(NodePath from, Waypoint* to)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Arc","params":"(const Arc&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Arc","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(Waypoint* other)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"UpdateDirection","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetVisible","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"csegment","type":"PointerTo< CollisionSegment >","attrs":0,"visibility":"public","doc":null},{"name":"node","type":"PointerTo< CollisionNode >","attrs":0,"visibility":"public","doc":null},{"name":"nodePath","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"from","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"to","type":"Waypoint","attrs":1,"visibility":"public","doc":null},{"name":"observer","type":"ArcObserver","attrs":1,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"A connection between two [Waypoint]s.\n","detail":null}},{"visibility":"public","name":"Waypoint","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"WithdrawArc","params":"(Waypoint* other)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UnwithdrawArc","params":"(Waypoint* other, ArcObserver* observer)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetWithdrawable","params":"(Waypoint* other)","attrs":0,"return_type":"std::pair<Arc, unsigned short>","visibility":"public","return_attrs":1,"doc":null},{"name":"Waypoint","params":"(NodePath root)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Waypoint","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const Waypoint& other)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const Waypoint* other)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(unsigned int id)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator<","params":"(const Waypoint& other)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator>","params":"(const Waypoint& other)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"ConnectUnsafe","params":"(Waypoint* other)","attrs":0,"return_type":"Arcs::iterator","visibility":"public","return_attrs":0,"doc":null},{"name":"Connect","params":"(Waypoint* other)","attrs":0,"return_type":"Arcs::iterator","visibility":"public","return_attrs":0,"doc":null},{"name":"Disconnect","params":"(Waypoint* other)","attrs":0,"return_type":"Arcs::iterator","visibility":"public","return_attrs":0,"doc":null},{"name":"DisconnectAll","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetArcTo","params":"(unsigned int id)","attrs":0,"return_type":"Arc","visibility":"public","return_attrs":1,"doc":null},{"name":"PositionChanged","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UpdateArcDirection","params":"(Waypoint*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSelected","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsSelected","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetArcsVisible","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GoalDistanceEstimate","params":"(const Waypoint& goal)","attrs":4,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"GetDistanceEstimate","params":"(const Waypoint& other)","attrs":4,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSuccessors","params":"(Waypoint* parent)","attrs":0,"return_type":"std::list<Waypoint*>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetCost","params":"(Waypoint&)","attrs":0,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"GetPosition","params":"(void)","attrs":4,"return_type":"LPoint3f","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadArcs","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unserialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UnserializeLoadArcs","params":"(World*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetMouseBox","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"id","type":"int","attrs":8,"visibility":"public","doc":null},{"name":"floor","type":"char","attrs":8,"visibility":"public","doc":null},{"name":"arcs","type":"Arcs","attrs":0,"visibility":"public","doc":null},{"name":"arcs_withdrawed","type":"ArcsWithdrawed","attrs":0,"visibility":"public","doc":null},{"name":"nodePath","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"selected","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"tmpArcs","type":"std::vector<int>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"A waypoint, used as nodes for the positioning and pathfinding system.\n","detail":null}},{"visibility":"public","name":"MapObject","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"UnSerialize","params":"(WindowFramework* window, Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"nodePath","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"texture","type":"PointerTo< Texture >","attrs":0,"visibility":"public","doc":null},{"name":"floor","type":"char","attrs":8,"visibility":"public","doc":null},{"name":"strModel","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"strTexture","type":"std::string","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"An object from a level represented by a model.\n","detail":null}},{"visibility":"public","name":"Interactions","decl":"namespace","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"DynamicObject","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"UnSerialize","params":"(World*, Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"waypoint","type":"Waypoint","attrs":1,"visibility":"public","doc":null},{"name":"type","type":"Type","attrs":0,"visibility":"public","doc":null},{"name":"script","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"locked","type":"bool","attrs":0,"visibility":"public","doc":null},{"name":"key","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"lockedArcs","type":"std::list<std::pair<int, int> >","attrs":0,"visibility":"public","doc":null},{"name":"inventory","type":"std::list<std::pair<std::string, int> >","attrs":0,"visibility":"public","doc":null},{"name":"charsheet","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"interactions","type":"char","attrs":0,"visibility":"public","doc":null},{"name":"dialog","type":"std::string","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"MapObject"}],"doc":{"overview":"A MapObject that also packs configuration for scripting, dialogs, interactions and inventory.\n","detail":null}},{"visibility":"public","name":"Zone","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"operator==","params":"(const std::string& comp)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Contains","params":"(unsigned int id)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Contains","params":"(Waypoint* wp)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"name","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"waypoints","type":"std::list<Waypoint*>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"A set of waypoints.\n","detail":null}},{"visibility":"public","name":"ExitZone","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[],"attributes":[{"name":"destinations","type":"std::list<std::string>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Zone"}],"doc":null},{"visibility":"public","name":"WorldLight","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"WorldLight","params":"(Type type, ParentType ptype, NodePath parent, const std::string& name)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"WorldLight","params":"(NodePath parent)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetEnabled","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetColor","params":"(void)","attrs":4,"return_type":"LColor","visibility":"public","return_attrs":0,"doc":null},{"name":"SetColor","params":"(float r, float g, float b, float a)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPosition","params":"(LPoint3 position)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const std::string& comp)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"UnSerialize","params":"(World*, Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ReparentTo","params":"(DynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ReparentTo","params":"(MapObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Initialize","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"name","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"nodePath","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"type","type":"Type","attrs":0,"visibility":"public","doc":null},{"name":"parent_type","type":"ParentType","attrs":0,"visibility":"public","doc":null},{"name":"light","type":"PointerTo< Light >","attrs":0,"visibility":"public","doc":null},{"name":"lens","type":"Lens","attrs":1,"visibility":"public","doc":null},{"name":"zoneSize","type":"float","attrs":0,"visibility":"public","doc":null},{"name":"enabled","type":"bool","attrs":0,"visibility":"public","doc":null},{"name":"enlightened","type":"std::list<NodePath>","attrs":0,"visibility":"public","doc":null},{"name":"parent","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"parent_i","type":"MapObject","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"World","decl":"struct","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"World","params":"(WindowFramework* window)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~World","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"FloorResize","params":"(int)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddWayPoint","params":"(float x, float y, float z)","attrs":0,"return_type":"Waypoint","visibility":"public","return_attrs":1,"doc":null},{"name":"DeleteWayPoint","params":"(Waypoint*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetWaypointFromNodePath","params":"(NodePath path)","attrs":0,"return_type":"Waypoint","visibility":"public","return_attrs":1,"doc":null},{"name":"GetWaypointFromId","params":"(unsigned int id)","attrs":0,"return_type":"Waypoint","visibility":"public","return_attrs":1,"doc":null},{"name":"GetWaypointClosest","params":"(LPoint3, unsigned char floor)","attrs":0,"return_type":"Waypoint","visibility":"public","return_attrs":1,"doc":null},{"name":"SetWaypointsVisible","params":"(bool v)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetWaypointLimits","params":"(short currentFloor, LPoint3& upperRight, LPoint3& upperLeft, LPoint3& bottomLeft)","attrs":4,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetWaypointPlane","params":"(short currentFloor)","attrs":4,"return_type":"LPlane","visibility":"public","return_attrs":0,"doc":null},{"name":"DeleteObject","params":"(MapObject* ptr, std::list<OBJTYPE>& list)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetObjectFromName","params":"(const std::string& name, std::list<OBJTYPE>& list)","attrs":0,"return_type":"OBJTYPE","visibility":"public","return_attrs":1,"doc":null},{"name":"GetObjectFromNodePath","params":"(NodePath path, std::list<OBJTYPE>& list)","attrs":0,"return_type":"OBJTYPE","visibility":"public","return_attrs":1,"doc":null},{"name":"ObjectChangeFloor","params":"(MapObject&, unsigned char floor, unsigned short type)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddMapObject","params":"(const std::string& name, const std::string& model, const std::string& texture, float x, float y, float z)","attrs":0,"return_type":"MapObject","visibility":"public","return_attrs":1,"doc":null},{"name":"DeleteMapObject","params":"(MapObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetMapObjectFromName","params":"(const std::string& name)","attrs":0,"return_type":"MapObject","visibility":"public","return_attrs":1,"doc":null},{"name":"GetMapObjectFromNodePath","params":"(NodePath path)","attrs":0,"return_type":"MapObject","visibility":"public","return_attrs":1,"doc":null},{"name":"SetMapObjectsVisible","params":"(bool v)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MapObjectChangeFloor","params":"(MapObject&, unsigned char floor)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"InsertDynamicObject","params":"(DynamicObject&)","attrs":0,"return_type":"DynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"AddDynamicObject","params":"(const std::string& name, DynamicObject::Type type, const std::string& model, const std::string& texture)","attrs":0,"return_type":"DynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"DeleteDynamicObject","params":"(DynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetDynamicObjectFromName","params":"(const std::string& name)","attrs":0,"return_type":"DynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"GetDynamicObjectFromNodePath","params":"(NodePath path)","attrs":0,"return_type":"DynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"SetDynamicObjectsVisible","params":"(bool v)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DynamicObjectSetWaypoint","params":"(DynamicObject&, Waypoint&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DynamicObjectChangeFloor","params":"(DynamicObject&, unsigned char floor)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddExitZone","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DeleteExitZone","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetExitZoneByName","params":"(const std::string&)","attrs":0,"return_type":"ExitZone","visibility":"public","return_attrs":1,"doc":null},{"name":"IsInExitZone","params":"(unsigned int id)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"AddEntryZone","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DeleteEntryZone","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetEntryZoneByName","params":"(const std::string&)","attrs":0,"return_type":"EntryZone","visibility":"public","return_attrs":1,"doc":null},{"name":"AddLight","params":"(WorldLight::Type, const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddLight","params":"(WorldLight::Type, const std::string&, MapObject* parent)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddLight","params":"(WorldLight::Type, const std::string&, DynamicObject* parent)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DeleteLight","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetLightByName","params":"(const std::string&)","attrs":0,"return_type":"WorldLight","visibility":"public","return_attrs":1,"doc":null},{"name":"CompileLight","params":"(WorldLight*, unsigned char = ColMask::Object | ColMask::DynObject)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UnSerialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CompileWaypoints","params":"(ProgressCallback)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CompileDoors","params":"(ProgressCallback)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"window","type":"WindowFramework","attrs":1,"visibility":"public","doc":null},{"name":"floors_node","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"floors","type":"Floors","attrs":0,"visibility":"public","doc":null},{"name":"rootWaypoints","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"waypoints","type":"Waypoints","attrs":0,"visibility":"public","doc":null},{"name":"rootMapObjects","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"objects","type":"MapObjects","attrs":0,"visibility":"public","doc":null},{"name":"rootDynamicObjects","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"dynamicObjects","type":"DynamicObjects","attrs":0,"visibility":"public","doc":null},{"name":"rootLights","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"lights","type":"WorldLights","attrs":0,"visibility":"public","doc":null},{"name":"sunlight_enabled","type":"bool","attrs":0,"visibility":"public","doc":null},{"name":"exitZones","type":"ExitZones","attrs":0,"visibility":"public","doc":null},{"name":"entryZones","type":"EntryZones","attrs":0,"visibility":"public","doc":null},{"name":"model_sphere","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"waypoint_graph","type":"DivideAndConquer::Graph<Waypoint, LPoint3f>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Stores all persistent data about a level.\n","detail":null}},{"visibility":"public","name":"Sync::Semaphore","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"Semaphore","params":"(unsigned int initial_count = 1, unsigned int maximum_count = 1)","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"~Semaphore","params":"(void)","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"TryWait","params":"(void)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"Wait","params":"(void)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"Post","params":"(void)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"SetDeadlockSafety","params":"(bool to_set)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SelfLock","params":"(void)","attrs":4,"return_type":"bool","visibility":"private","return_attrs":32,"doc":null},{"name":"GetCurrentThreadId","params":"(void)","attrs":16,"return_type":"ThreadId","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"__linux__","type":"ifdef","attrs":0,"visibility":"private","doc":null},{"name":"ifdef","type":"endif","attrs":0,"visibility":"private","doc":null},{"name":"public:","type":"endif","attrs":0,"visibility":"private","doc":null},{"name":"_handle","type":"Handle","attrs":0,"visibility":"private","doc":null},{"name":"_max_count","type":"int","attrs":8,"visibility":"private","doc":null},{"name":"_deadlock_safety","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_thread_lock","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_thread_id","type":"ThreadId","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Sync::ISignal","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"ExecuteRecordedCalls","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetDirect","params":"(bool)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Sync::Signals","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"ExecuteRecordedCalls","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"std::list<ISignal*>"}],"doc":null},{"visibility":"private","name":"Sync::Signal::InterfaceObserver","decl":"struct","file":"include/level/level.hpp","namespaces":["Sync","Signal"],"constructors":[],"methods":[{"name":"~InterfaceObserver","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator","params":"()()","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"id","type":"ObserverId","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"private","name":"Sync::Signal::FunctionObserver","decl":"class","file":"include/level/level.hpp","namespaces":["Sync","Signal"],"constructors":[],"methods":[{"name":"FunctionObserver","params":"(Function function)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator","params":"()()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_function","type":"Function","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InterfaceObserver"}],"doc":null},{"visibility":"private","name":"Sync::Signal::Observer","decl":"class","file":"include/level/level.hpp","namespaces":["Sync","Signal"],"constructors":[],"methods":[{"name":"Observer","params":"(ObserverClass& observer, Method method)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator","params":"()()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_observer","type":"ObserverClass","attrs":2,"visibility":"private","doc":null},{"name":"_method","type":"Method","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InterfaceObserver"}],"doc":null},{"visibility":"public","name":"Sync::Signal::RecordedCall","decl":"struct","file":"include/level/level.hpp","namespaces":["Sync","Signal"],"constructors":[],"methods":[{"name":"Serialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unserialize","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"byte","type":"bool","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Sync::Signal","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"Signal","params":"(bool direct = true)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Signal","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetDirect","params":"(bool set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsDirect","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Emit","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Connect","params":"(ObserverClass& observerInstance, typename Observer<ObserverClass>::Method method)","attrs":0,"return_type":"ObserverId","visibility":"public","return_attrs":0,"doc":null},{"name":"Connect","params":"(typename FunctionObserver::Function function)","attrs":0,"return_type":"ObserverId","visibility":"public","return_attrs":0,"doc":null},{"name":"Disconnect","params":"(ObserverId id)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DisconnectAll","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ObserverCount","params":"(void)","attrs":4,"return_type":"int","visibility":"public","return_attrs":32,"doc":null},{"name":"ExecuteRecordedCalls","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FuncExecuteRecordedCalls","params":"(RecordedCalls& calls)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PushRecordCall","params":"(Utils::Packet& packet)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FetchRecordCall","params":"(Utils::Packet& packet)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"RecordCallCount","params":"(void)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"PushedCallCount","params":"(void)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"BackupRecordedCalls","params":"(bool on_off)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddObserver","params":"(InterfaceObserver* observer)","attrs":0,"return_type":"ObserverId","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_iterator","type":"Observers::iterator","attrs":0,"visibility":"private","doc":null},{"name":"_iterator_updated_during_emit","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_observers","type":"Observers","attrs":0,"visibility":"private","doc":null},{"name":"_recordedCalls","type":"RecordedCalls","attrs":0,"visibility":"private","doc":null},{"name":"_backedupCalls","type":"RecordedCalls","attrs":0,"visibility":"private","doc":null},{"name":"_pushedCalls","type":"RecordedCalls","attrs":0,"visibility":"private","doc":null},{"name":"_direct","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_semaphore","type":"Semaphore","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"ISignal"}],"doc":{"overview":"Template for the Observer design pattern. Allows the implementation of signal/slot behaviors.\n","detail":null}},{"visibility":"private","name":"Sync::ObserverHandler::IObserverPair","decl":"struct","file":"include/level/level.hpp","namespaces":["Sync","ObserverHandler"],"constructors":[],"methods":[{"name":"~IObserverPair","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Disconnect","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const ISignal& comp)","attrs":68,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"private","name":"Sync::ObserverHandler::ObserverPair","decl":"struct","file":"include/level/level.hpp","namespaces":["Sync","ObserverHandler"],"constructors":[],"methods":[{"name":"ObserverPair","params":"(C& signal, ObserverId id)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Disconnect","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const ISignal& comp)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"signal","type":"C","attrs":2,"visibility":"public","doc":null},{"name":"id","type":"ObserverId","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"IObserverPair"}],"doc":null},{"visibility":"public","name":"Sync::ObserverHandler","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"~ObserverHandler","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"DisconnectAll","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DisconnectAllFrom","params":"(const ISignal& signal)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Add","params":"(C& signal, ObserverId id)","attrs":0,"return_type":"void","visibility":"public","return_attrs":32,"doc":null},{"name":"Connect","params":"(C& signal, ObserverClass& observerInstance, typename C::template Observer<ObserverClass>::Method method)","attrs":0,"return_type":"void","visibility":"public","return_attrs":32,"doc":null},{"name":"Connect","params":"(C& signal, typename C::FunctionObserver::Function function)","attrs":0,"return_type":"void","visibility":"public","return_attrs":32,"doc":null}],"attributes":[{"name":"_observers","type":"Observers","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handles a set of observers connected to signals. Automatically disconnect all the observers when the instance of ObserverHandler is destroyed.\n","detail":null}},{"visibility":"public","name":"Sync::MyThread","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"~MyThread","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Launch","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Join","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":64,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"LaunchFailed","params":"(void)","attrs":64,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackLaunch","params":"(void* arg)","attrs":16,"return_type":"void","visibility":"private","return_attrs":1,"doc":null}],"attributes":[{"name":"_handle","type":"pthread_t","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Sync","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Party","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Join","params":"(InstanceDynamicObject* i)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Join","params":"(DynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Leave","params":"(InstanceDynamicObject* i)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Leave","params":"(DynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ConstGetObjects","params":"(void)","attrs":4,"return_type":"DynamicObjects","visibility":"public","return_attrs":6,"doc":null},{"name":"GetObjects","params":"(void)","attrs":0,"return_type":"DynamicObjects","visibility":"public","return_attrs":2,"doc":null},{"name":"GetStatsheets","params":"(void)","attrs":4,"return_type":"Statsheets","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"Updated","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_objects","type":"DynamicObjects","attrs":0,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Basically a set of [DynamicObjects] that can be joined or left during the execution of a [Level]. The specialization\n[PlayerParty] is used in [GameTask] to allow the retrieval / insertion of the player's party when a level is loaded or\nclosed. [Party] is also used in [Level] when spawning characters into a [Zone]\n","detail":null}},{"visibility":"public","name":"PlayerParty","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"PlayerParty","params":"(const std::string& savepath)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~PlayerParty","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Create","params":"(const std::string& savepath, const std::string& name, const std::string& model, const std::string& texture)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(const std::string& savepath)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetHasLocalObjects","params":"(bool val)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerParty","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet&)","attrs":4,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UnSerialize","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_local_objects","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Party"}],"doc":{"overview":"Specialization of [Party] for the player's party\n","detail":null}},{"visibility":"public","name":"Timer","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Timer","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetElapsedTime","params":"(void)","attrs":4,"return_type":"double","visibility":"public","return_attrs":0,"doc":null},{"name":"Profile","params":"(std::string str)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Restart","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetLastTime","params":"(double v)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetLastTime","params":"(void)","attrs":4,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"asConstructor","params":"(void* memory)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"asDestructor","params":"(void* memory)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_lastTime","type":"double","attrs":0,"visibility":"private","doc":null},{"name":"_globalClock","type":"PointerTo< ClockObject >","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Abstraction for realtime management.\n","detail":null}},{"visibility":"public","name":"TimeManager::Task","decl":"struct","file":"include/level/level.hpp","namespaces":["TimeManager"],"constructors":[],"methods":[{"name":"NextStep","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Serialize","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unserialize","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Task","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"~Task","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"loop","type":"bool","attrs":0,"visibility":"public","doc":null},{"name":"it","type":"short","attrs":8,"visibility":"public","doc":null},{"name":"lastY,","type":"short","attrs":8,"visibility":"public","doc":null},{"name":"timeY,","type":"short","attrs":8,"visibility":"public","doc":null},{"name":"level","type":"char","attrs":8,"visibility":"public","doc":null},{"name":"Interval","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"IntervalIt","type":"Sync::Signal<void (unsigned short)>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"A task that will be spontaneously or regularly executed by the [TimeManager].\n","detail":null}},{"visibility":"public","name":"TimeManager","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"TimeManager","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~TimeManager","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetDaysPerMonth","params":"(unsigned short m, unsigned short year = 1)","attrs":16,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"ClearTasks","params":"(unsigned char level)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetTime","params":"(unsigned short s, unsigned short m, unsigned short h, unsigned short d, unsigned short mo, unsigned short y)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetYear","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetMonth","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetDay","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetHour","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetMinute","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetSecond","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"AddElapsedSeconds","params":"(float s)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddElapsedTime","params":"(unsigned short s, unsigned short m = 0, unsigned short h = 0, unsigned short d = 0, unsigned short mo = 0, unsigned short y = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddTask","params":"(unsigned char level, bool loop, unsigned short s, unsigned short m = 0, unsigned short h = 0, unsigned short d = 0, unsigned short mo = 0, unsigned short y = 0)","attrs":0,"return_type":"Task","visibility":"public","return_attrs":1,"doc":null},{"name":"DelTask","params":"(Task* task)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ExecuteTasks","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CorrectValues","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"fseconds","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"year,","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"tasks","type":"Tasks","attrs":0,"visibility":"private","doc":null},{"name":"safeIt","type":"Tasks::iterator","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Keeps track of game-relative time. It also provide an API to periodically or spontaneously execute tasks inside the\nworldmap and/or level contexts.\n","detail":null}},{"visibility":"public","name":"DataBranch","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"DataBranch","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~DataBranch","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"key","type":"std::string","attrs":0,"visibility":"public","doc":{"name":"key","short":"name of the node"}},{"name":"value","type":"std::string","attrs":0,"visibility":"public","doc":{"name":"value","short":"value of the branch, stored as a string. It can be converted to other types by using [Data]."}},{"name":"children","type":"Children","attrs":0,"visibility":"public","doc":{"name":"children","short":"list of children nodes"}},{"name":"father","type":"DataBranch","attrs":1,"visibility":"public","doc":{"name":"father","short":"points to the parent node if there is one, null otherwise."}},{"name":"nil,","type":"bool","attrs":0,"visibility":"public","doc":{"name":"nil","short":"is true if the current branch is temporary. If set to true, the Data wrappers will destroy it after all the instances of Data wrapping it are destoryed"}},{"name":"pointers","type":"int","attrs":8,"visibility":"public","doc":{"name":"root","short":"must be true if the branch is the root of the tree"}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Leaf or root of a data tree. It should always be handled using the [Data] object as a wrapper.\n","detail":null}},{"visibility":"public","name":"Data::my_iterator","decl":"class","file":"include/level/level.hpp","namespaces":["Data"],"constructors":[],"methods":[{"name":"my_iterator","params":"(Children::iterator it)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator=","params":"(Children::iterator it)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const my_iterator& it)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator!=","params":"(const my_iterator& it)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator*","params":"()","attrs":4,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"operator++","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator--","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_it","type":"Children::iterator","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"std::iterator_traits<Children::iterator>"}],"doc":null},{"visibility":"public","name":"Data::const_my_iterator","decl":"class","file":"include/level/level.hpp","namespaces":["Data"],"constructors":[],"methods":[{"name":"const_my_iterator","params":"(Children::const_iterator it)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator=","params":"(Children::const_iterator it)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const const_my_iterator& it)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator!=","params":"(const const_my_iterator& it)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator*","params":"()","attrs":4,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"operator++","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"operator--","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_it","type":"Children::const_iterator","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"std::iterator_traits<Children::const_iterator>"}],"doc":null},{"visibility":"public","name":"Data","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Data","params":"(const std::string&, DataBranch*)","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":{"name":"Data"}},{"name":"Data","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Data"}},{"name":"Data","params":"(DataTree*   d)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Data"}},{"name":"Data","params":"(DataBranch* d)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Data"}},{"name":"~Data","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~Data"}},{"name":"operator[]","params":"(const std::string& key)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":{"name":"operator[]"}},{"name":"operator[]","params":"(const std::string& key)","attrs":4,"return_type":"Data","visibility":"public","return_attrs":4,"doc":{"name":"operator[]"}},{"name":"operator[]","params":"(unsigned int it)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":{"name":"operator[]"}},{"name":"Key","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":{"name":"Key","short":"Returns the key of the current element as a string"}},{"name":"Value","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":{"name":"Value","short":"Returns the value of the current element as a string"}},{"name":"SetKey","params":"(const std::string& newKey)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetKey","short":"Changes the key of the current element"}},{"name":"Duplicate","params":"(Data var)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Duplicate","short":"Duplicates all elements of the branch passed as a paremter into the current element"}},{"name":"operator=","params":"(const Data& var)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":6,"doc":{"short":"A templated cast operator allowing polymorphic access of the current element's value. It supports every type supported by [std::stringstream]\n"}},{"name":"operator=","params":"(const T& var)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Remove","short":"If the current element already exists, it will be removed from the tree after this [Data] is destroyed"}},{"name":"operator==","params":"(const T& var)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"Nil","short":"Returns true if the current branch doesn't exist\n"}},{"name":"T","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":{"name":"NotNil","short":"Returns true if the current branch exists"}},{"name":"Remove","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Parent","short":"Returns the parent branch as a [Data] instance. If the current element has no parent, the Nil method of the returned [Data] will return true"}},{"name":"CutBranch","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Nil","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"NotNil","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Parent","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"PushBack","params":"(Data d)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Output","params":"(unsigned char indent = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Count","params":"(void)","attrs":4,"return_type":"int","visibility":"public","return_attrs":8,"doc":null},{"name":"begin","params":"()","attrs":0,"return_type":"my_iterator","visibility":"public","return_attrs":0,"doc":null},{"name":"const_begin","params":"()","attrs":4,"return_type":"const_my_iterator","visibility":"public","return_attrs":0,"doc":null},{"name":"end","params":"()","attrs":0,"return_type":"my_iterator","visibility":"public","return_attrs":0,"doc":null},{"name":"const_end","params":"()","attrs":4,"return_type":"const_my_iterator","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_data","type":"DataBranch","attrs":1,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handle for a [DataBranch]. It allow safe polymorphic access to, and dynamic creation of sub-branches. It also\nprovide different tools to ease the management of a data tree.\n","detail":null}},{"visibility":"public","name":"Yaml","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"ShinyLang::Parser","decl":"class","file":"include/level/level.hpp","namespaces":["ShinyLang"],"constructors":[],"methods":[{"name":"Parser","params":"(const std::string&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Parser","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":0,"return_type":"DataTree","visibility":"public","return_attrs":1,"doc":null}],"attributes":[{"name":"_fileExist","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_lines","type":"std::list<std::string>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"ShinyLang","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Json::Parser","decl":"class","file":"include/level/level.hpp","namespaces":["Json"],"constructors":[],"methods":[{"name":"Parser","params":"(const std::string&, bool filename = true)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":0,"return_type":"DataTree","visibility":"public","return_attrs":1,"doc":null},{"name":"ParseValue","params":"(DataBranch*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ParseString","params":"(DataBranch*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ParseOther","params":"(DataBranch*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ParseObject","params":"(DataBranch*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ParseArray","params":"(DataBranch*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_source","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_str","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_it","type":"int","attrs":8,"visibility":"private","doc":null},{"name":"_fileLoaded","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Json","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"DataTree::Factory","decl":"struct","file":"include/level/level.hpp","namespaces":["DataTree"],"constructors":[],"methods":[{"name":"Yaml","params":"(const std::string& filename)","attrs":16,"return_type":"DataTree","visibility":"public","return_attrs":1,"doc":null},{"name":"ShinyLang","params":"(const std::string& filename)","attrs":16,"return_type":"DataTree","visibility":"public","return_attrs":1,"doc":null},{"name":"JSON","params":"(const std::string& filename)","attrs":16,"return_type":"DataTree","visibility":"public","return_attrs":1,"doc":null},{"name":"StringJSON","params":"(const std::string& str)","attrs":16,"return_type":"DataTree","visibility":"public","return_attrs":1,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Set of methods for generating DataTree.\n","detail":null}},{"visibility":"public","name":"DataTree::Writers","decl":"struct","file":"include/level/level.hpp","namespaces":["DataTree"],"constructors":[],"methods":[{"name":"JSON","params":"(Data, const std::string& filename)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"StringJSON","params":"(Data, std::string& str)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Set of methods to serialize DataTrees.\n","detail":null}},{"visibility":"public","name":"DataTree","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"DataTree","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator[]","params":"(const std::string& string)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(void)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(const std::string& path)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSourceFile","params":"(void)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null}],"attributes":[{"name":"source","type":"std::string","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"DataBranch"}],"doc":{"overview":"Representation as a tree of a loaded configuration file (mainly JSON).\n","detail":null}},{"visibility":"public","name":"DataEngine","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"DataEngine","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~DataEngine","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Load","params":"(const std::string& filepath)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(const std::string& filepath)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetDiplomacy","params":"(void)","attrs":0,"return_type":"WorldDiplomacy","visibility":"public","return_attrs":2,"doc":null}],"attributes":[{"name":"_dataTree","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_diplomacy","type":"WorldDiplomacy","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Data"}],"doc":{"overview":"Class handle for all the data generated by the game. It is used by scripts to store data and by the core parts to\nload data relevant to the current instance of the game.\n","detail":null}},{"visibility":"public","name":"AnimatedObject","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"AnimatedObject","params":"(WindowFramework*)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"GetNodePath","short":"Inheriting classes must implement a getter for the model"}},{"name":"GetNodePath","params":"(void)","attrs":68,"return_type":"NodePath","visibility":"public","return_attrs":0,"doc":{"name":"ResetAnimation","short":"This hook will be called whenever an animation finishes"}},{"name":"ResetAnimation","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayAnimation","params":"(const std::string& name, bool loop = false)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadAnimation","params":"(const std::string& name)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"TaskAnimation","params":"(void)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"PlayIdleAnimation","params":"(void)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null}],"attributes":[{"name":"AnimationEnd","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":{"name":"_window","short":"","desc":""}},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"protected","doc":{"name":"_modelName","short":"The name of the model, used to find the corresponding animations files","desc":"The value must be the name of the model file with no extension or path given."}},{"name":"_modelName","type":"std::string","attrs":0,"visibility":"protected","doc":{"name":"_anims","short":""}},{"name":"_anims","type":"AnimControlCollection","attrs":0,"visibility":"protected","doc":{"name":"_mapAnims","short":"key/value map of Panda3D animation controllers"}},{"name":"_mapAnims","type":"MapAnims","attrs":0,"visibility":"protected","doc":{"name":"anim","short":"pointer to the currently played animation"}},{"name":"_anim","type":"AnimControl","attrs":1,"visibility":"protected","doc":{"name":"_animLoop","short":"Set to true if the currently played animation must be looping"}},{"name":"_animLoop","type":"bool","attrs":0,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"This is a component for managing an animated model.<br />\nIt can load animations file, play them on a model, and warn a set of\nobservers whenever the animation is finished.<br />\nThe inheriting classes must regularly call the protected [TaskAnimation]\nmethod, which will emit the AnimationEnd signal whenever it is relevant.\n","detail":null}},{"visibility":"private","name":"WaypointModifier::WithdrawedArc","decl":"struct","file":"include/level/level.hpp","namespaces":["WaypointModifier"],"constructors":[],"methods":[{"name":"WithdrawedArc","params":"(Waypoint* first, Waypoint* second, Waypoint::ArcObserver* observer)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"first,","type":"Waypoint","attrs":1,"visibility":"public","doc":null},{"name":"observer","type":"Waypoint::ArcObserver","attrs":1,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"WaypointModifier","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"WaypointModifier","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"ProcessCollisions","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UnprocessCollisions","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"HasOccupiedWaypoint","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetOccupiedWaypointAsInt","params":"(void)","attrs":4,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"GetOccupiedWaypoint","params":"(void)","attrs":4,"return_type":"Waypoint","visibility":"public","return_attrs":1,"doc":null},{"name":"SetOccupiedWaypoint","params":"(Waypoint* wp)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"WithdrawAllArcs","params":"(unsigned int id)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"WithdrawAllArcs","params":"(Waypoint* waypoint)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"WithdrawArc","params":"(unsigned int id1, unsigned int id2)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"WithdrawArc","params":"(Waypoint* first, Waypoint* second)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null}],"attributes":[{"name":"_collision_processed","type":"short","attrs":8,"visibility":"protected","doc":null},{"name":"_level","type":"Level","attrs":1,"visibility":"protected","doc":null},{"name":"_waypointOccupied","type":"Waypoint","attrs":1,"visibility":"protected","doc":null},{"name":"_waypointDisconnected","type":"std::list<std::pair<int, int> >","attrs":0,"visibility":"protected","doc":null},{"name":"_withdrawedArcs","type":"WithdrawedArcs","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Component for an object that will affect the pathfinding.\n","detail":null}},{"visibility":"public","name":"ObjectTypes","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"ObjectType2Code","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"InstanceDynamicObject::Interaction","decl":"struct","file":"include/level/level.hpp","namespaces":["InstanceDynamicObject"],"constructors":[],"methods":[{"name":"Interaction","params":"(const std::string& name, InstanceDynamicObject* instance, Sync::Signal<void (InstanceDynamicObject*)>* signal)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"name","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"instance","type":"InstanceDynamicObject","attrs":1,"visibility":"public","doc":null},{"name":"signal","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":1,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"InstanceDynamicObject::GoToData","decl":"struct","file":"include/level/level.hpp","namespaces":["InstanceDynamicObject"],"constructors":[],"methods":[],"attributes":[{"name":"nearest","type":"Waypoint","attrs":1,"visibility":"public","doc":null},{"name":"objective","type":"InstanceDynamicObject","attrs":1,"visibility":"public","doc":null},{"name":"max_distance","type":"int","attrs":0,"visibility":"public","doc":null},{"name":"min_distance","type":"int","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"InstanceDynamicObject","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"InstanceDynamicObject","params":"(Level* level, DynamicObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"InstanceDynamicObject"}},{"name":"InstanceDynamicObject","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"InstanceDynamicObject"}},{"name":"~InstanceDynamicObject","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~InstanceDynamicObject"}},{"name":"Load","params":"(Utils::Packet&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Load"}},{"name":"Save","params":"(Utils::Packet&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Save"}},{"name":"Run","params":"(float elapsedTime)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Run","shorts":"Procedure ran when the object is active. Except in some cases for [ObjectCharacter]s, the procedure is run once every frame"}},{"name":"operator==","params":"(NodePath np)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"operator==","shorts":"Compares the [NodePath] passed as parameter with the [DynamicObject]'s [NodePath]."}},{"name":"operator==","params":"(const std::string& name)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"operator=="}},{"name":"GetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":{"name":"GetName"}},{"name":"GetNodePath","params":"(void)","attrs":4,"return_type":"NodePath","visibility":"public","return_attrs":0,"doc":{"name":"GetNodePath"}},{"name":"GetInteractions","params":"(void)","attrs":0,"return_type":"InteractionList","visibility":"public","return_attrs":2,"doc":{"name":"GetInteractions"}},{"name":"GetDialog","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":{"name":"GetDialog"}},{"name":"GetDynamicObject","params":"(void)","attrs":0,"return_type":"DynamicObject","visibility":"public","return_attrs":1,"doc":{"name":"GetDynamicObject"}},{"name":"GetGoToData","params":"(InstanceDynamicObject* character)","attrs":64,"return_type":"GoToData","visibility":"public","return_attrs":0,"doc":{"name":"GetGoToData"}},{"name":"Get","params":"(void)","attrs":0,"return_type":"C","visibility":"public","return_attrs":1,"doc":{"name":"CallbackActionUse"}},{"name":"CallbackActionUse","params":"(InstanceDynamicObject* object)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"ResetAnimation","short":"Interrupts all animation running on the object's [NodePath]"}},{"name":"CallbackActionUseSkill","params":"(ObjectCharacter* object, const std::string& skill)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddTextBox","params":"(const std::string& text, unsigned short r, unsigned short g, unsigned short b, float timeout = 5.f)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ResetAnimation","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ResetInteractions","params":"(void)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"ThatDoesNothing","params":"()","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"CallbackAnimationEnded","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"ActionUse","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":0,"visibility":"public","doc":{"name":"ActionUse","short":"Signal emitted when the player ask to use the Use interaction on a dynamic object"}},{"name":"ActionUseObjectOn","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":0,"visibility":"public","doc":{"name":"ActionUseObjectOn","short":"Signal emitted when the player ask to use the Use Object On interaction on a dynamic object"}},{"name":"ActionUseSkillOn","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":0,"visibility":"public","doc":{"name":"ActionUseSkillOn","short":"Signal emitted when the player ask to use the Skill On interaction on a dynamic object"}},{"name":"ActionTalkTo","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":0,"visibility":"public","doc":{"name":"ActionTalkTo","short":"Signal emitted when the player ask to use the Talk To interaction on a dynamic object"}},{"name":"AnimationEnded","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":0,"visibility":"public","doc":{"name":"AnimationEnded","short":"After calling PlayAnimation, it is possible to hook to this signal to be warned when the animation finished.","desc":"Note that if another animation takes over, your callback will never be called."}},{"name":"_type","type":"char","attrs":8,"visibility":"protected","doc":{"name":"_type","short":"Allows mapping of the actual instance's type","desc":"The value is based on the [ObjectTypes::ObjectType] enum, and is used in the Get method to ensure that a null pointer is returned if the intented cast is impossible"}},{"name":"_object","type":"DynamicObject","attrs":1,"visibility":"protected","doc":{"name":"_object","short":"Pointer to the [DynamicObject] that this object represent in the [Level]"}},{"name":"_skill_target","type":"SkillTarget","attrs":0,"visibility":"protected","doc":{"name":"_interactions","short":"List of interactions available for this object, as specified in the [DynamicObject]"}},{"name":"_interactions","type":"InteractionList","attrs":0,"visibility":"protected","doc":{"name":"_idle_size","short":"Stores the three dimensional size of the [DynamicObjecŧ]'s model while it is playing the idle animation"}},{"name":"_idle_size","type":"LPoint3","attrs":0,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"WaypointModifier"},{"visibility":"public","type":"AnimatedObject"}],"doc":{"overview":"Instance of a [DynamicObject] created by the [Level].\n","detail":null}},{"visibility":"public","name":"LevelExitZone","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"LevelExitZone","params":"(Level* level, std::list<std::string> destinations)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~LevelExitZone","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetName","params":"(const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"CanGoThrough","params":"(unsigned char id)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GoingThrough","params":"(void* character)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GoingThroughLocal","params":"(void* character)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GoingThroughExit","params":"(void* character)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"ExitZone","type":"Sync::Signal<void (void)>","attrs":0,"visibility":"public","doc":null},{"name":"GoToNextZone","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"SelectNextZone","type":"Sync::Signal<void (const std::vector<std::string>&)>","attrs":0,"visibility":"public","doc":null},{"name":"_name","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_level","type":"Level","attrs":1,"visibility":"private","doc":null},{"name":"_destinations","type":"std::vector<std::string>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Waypoint::ArcObserver"}],"doc":{"overview":"Represent an exiting zone: a set of waypoints that cause the player to go to another\nzone or to pick another zone when he walks over them.\n","detail":null}},{"visibility":"public","name":"Lockable","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Lockable","params":"(DynamicObject* o)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Lockable","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetKeyName","params":"(void)","attrs":4,"return_type":"string","visibility":"public","return_attrs":0,"doc":null},{"name":"IsLocked","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"IsOpen","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Unlock","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_closed","type":"bool","attrs":0,"visibility":"protected","doc":null},{"name":"__object","type":"DynamicObject","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"ObjectDoor","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ObjectDoor","params":"(Level* level, DynamicObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~ObjectDoor","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"ProcessCollisions","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetKeyName","params":"()","attrs":4,"return_type":"string","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionUse","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetGoToData","params":"(InstanceDynamicObject* character)","attrs":0,"return_type":"GoToData","visibility":"public","return_attrs":0,"doc":null},{"name":"ObserveWaypoints","params":"(bool doObserver)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CanGoThrough","params":"(unsigned char id)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GoingThrough","params":"(void*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_workaround_wp_disconnected","type":"std::list<std::pair<int, int> >","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InstanceDynamicObject"},{"visibility":"public","type":"Lockable"},{"visibility":"public","type":"Waypoint::ArcObserver"}],"doc":null},{"visibility":"public","name":"Script::Engine","decl":"class","file":"include/level/level.hpp","namespaces":["Script"],"constructors":[],"methods":[{"name":"Get","params":"(void)","attrs":16,"return_type":"asIScriptEngine","visibility":"public","return_attrs":1,"doc":null},{"name":"Initialize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Finalize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadModule","params":"(const std::string& name, const std::string& filepath)","attrs":16,"return_type":"asIScriptModule","visibility":"public","return_attrs":1,"doc":null},{"name":"MessageCallback","params":"(const asSMessageInfo* msg, void* param)","attrs":16,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"ScriptError","type":"Sync::Signal<void (const std::string)>","attrs":0,"visibility":"public","doc":null},{"name":"_engine","type":"asIScriptEngine","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"private","name":"Script::ModuleManager::LoadedModule","decl":"struct","file":"include/level/level.hpp","namespaces":["Script","ModuleManager"],"constructors":[],"methods":[{"name":"operator==","params":"(asIScriptModule* module)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const std::string& str)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"filepath","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"ptr","type":"asIScriptModule","attrs":1,"visibility":"public","doc":null},{"name":"users","type":"short","attrs":8,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Script::ModuleManager","decl":"class","file":"include/level/level.hpp","namespaces":["Script"],"constructors":[],"methods":[{"name":"Require","params":"(const std::string& name, const std::string& filepath)","attrs":16,"return_type":"asIScriptModule","visibility":"public","return_attrs":1,"doc":null},{"name":"Release","params":"(asIScriptModule* module)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"OutputFunctionList","params":"(asIScriptModule* module)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_modules","type":"Modules","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Script","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Call","params":"(asIScriptContext*, asIScriptFunction*, const std::string fmt, ...)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"i18n","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"i18n","params":"(const std::string& language)","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"~i18n","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"Load","params":"(const std::string& language)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unload","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LanguagesAvailable","params":"(void)","attrs":16,"return_type":"std::vector<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"T","params":"(const std::string& key)","attrs":16,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"GetDialogs","params":"(void)","attrs":16,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"GetStatistics","params":"(void)","attrs":16,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_self","type":"i18n","attrs":1,"visibility":"private","doc":null},{"name":"LanguageChanged","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_dialogs","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_statistics","type":"DataTree","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Intertionalization\n","detail":null}},{"visibility":"public","name":"Rocket","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ForeachElement","params":"(Rocket::Core::Element* root, const std::string& tag, std::function<void (Rocket::Core::Element*)> lambda)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"MyRocket","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"SetVisibility","params":"(Rocket::Core::Context* context, bool visibility)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MyRocket","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"RocketListener","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ProcessEvent","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"EventReceived","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Rocket::Core::EventListener"}],"doc":null},{"visibility":"private","name":"UiBase::Listener","decl":"struct","file":"include/level/level.hpp","namespaces":["UiBase"],"constructors":[],"methods":[{"name":"Listener","params":"(Rocket::Core::Element* elem, const std::string& event, RocketListener& instance)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const Listener& listener)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"elem","type":"std::string","attrs":4,"visibility":"public","doc":null},{"name":"event","type":"std::string","attrs":4,"visibility":"public","doc":null},{"name":"instance","type":"RocketListener","attrs":2,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"UiBase","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiBase","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiBase","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"FireShow","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FireHide","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Show","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Hide","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsVisible","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetModal","params":"(bool modal)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Foreach","params":"(const std::string& tag, std::function<void (Rocket::Core::Element*)> lambda)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPropertyOnAll","params":"(Rocket::Core::Element* elem, const std::string& property, const std::string& value)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FadeOut","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FadeIn","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ToggleEventListener","params":"(bool toggle_on, const std::string& id, const std::string& event, RocketListener& listener)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Translate","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RecursiveTranslate","params":"(Rocket::Core::Element*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"VisibilityToggled","type":"Sync::Signal<void (bool)>","attrs":0,"visibility":"public","doc":null},{"name":"VisibilityToggledOn,","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"protected","doc":null},{"name":"_root","type":"Rocket::Core::ElementDocument","attrs":1,"visibility":"protected","doc":null},{"name":"_context","type":"Rocket::Core::Context","attrs":1,"visibility":"protected","doc":null},{"name":"_languageObs","type":"Sync::ObserverId","attrs":0,"visibility":"private","doc":null},{"name":"_listeners","type":"Listeners","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Component for a class that implements a Rocket interface.\n","detail":null}},{"visibility":"public","name":"GameMenu","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameMenu","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GameMenu","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"MenuEventContinue","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"SaveClicked","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"LoadClicked","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"ExitClicked","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"OptionsClicked","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"_continueClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_exitClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_optionsClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_saveClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_loadClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for the in-game main menu.\n","detail":null}},{"visibility":"public","name":"GameMainBar","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameMainBar","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GameMainBar","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"AppendToConsole","params":"(const std::string& str)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCurrentAP","params":"(unsigned short ap, unsigned short maxap)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetMaxAP","params":"(unsigned short ap)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEnabledAP","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCurrentHp","params":"(short hp)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCurrentAc","params":"(short ac)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEquipedItem","params":"(unsigned short it, InventoryObject* item)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEquipedItemAction","params":"(unsigned short it, InventoryObject* item, unsigned char actionIt)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackEquipedItem1Clicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackEquipedItem2Clicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackPassTurnClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackCombatEndClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"MenuButtonClicked","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"InventoryButtonClicked","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"PersButtonClicked","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"PipbuckButtonClicked","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"SkilldexButtonClicked,","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"UseEquipedItem","type":"Sync::Signal<void (unsigned short)>","attrs":0,"visibility":"public","doc":null},{"name":"EquipedItemNextAction","type":"Sync::Signal<void (unsigned short)>","attrs":0,"visibility":"public","doc":null},{"name":"CombatPassTurn","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"CombatEnd","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"OpenSkilldex","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"OpenSpelldex","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"EquipedItem1Clicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"EquipedItem2Clicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"PassTurnClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"CombatEndClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_apMax","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"_apEnabled","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for the HUD used while the player is inside a [Level].\n","detail":null}},{"visibility":"public","name":"InventoryObject::EquipedModel","decl":"struct","file":"include/level/level.hpp","namespaces":["InventoryObject"],"constructors":[],"methods":[{"name":"EquipedModel","params":"(WindowFramework* win, InventoryObject* pObject)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~EquipedModel","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetNodePath","params":"(void)","attrs":4,"return_type":"NodePath","visibility":"public","return_attrs":0,"doc":null},{"name":"ResetAnimation","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"np","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"object","type":"InventoryObject","attrs":2,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"AnimatedObject"}],"doc":null},{"visibility":"private","name":"InventoryObject::ActionHooks","decl":"struct","file":"include/level/level.hpp","namespaces":["InventoryObject"],"constructors":[],"methods":[{"name":"ActionHooks","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"Use","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null},{"name":"UseOnCharacter","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null},{"name":"UseOnDoor","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null},{"name":"UseOnOthers","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null},{"name":"UseAsWeapon","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null},{"name":"HitChances","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"InventoryObject","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"InventoryObject","params":"(Data)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~InventoryObject","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"HitSuccessRate","params":"(ObjectCharacter* user, ObjectCharacter* target, unsigned char useType)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"UseAsWeapon","params":"(ObjectCharacter* user, ObjectCharacter* target, unsigned char useType)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"UseOn","params":"(ObjectCharacter* user, InstanceDynamicObject* target, unsigned char useType)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"Use","params":"(ObjectCharacter* user, unsigned char useType)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"GetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"GetIcon","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"CreateDynamicObject","params":"(World* world)","attrs":4,"return_type":"DynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"CreateEquipedModel","params":"(World* world)","attrs":0,"return_type":"EquipedModel","visibility":"public","return_attrs":1,"doc":null},{"name":"CanWeild","params":"(ObjectCharacter*, std::string slot, unsigned char mode = 0)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"CanWeild","params":"(ObjectCharacter*, EquipedMode)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEquiped","params":"(ObjectCharacter*, bool set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsEquiped","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"IsGroupableWith","params":"(const InventoryObject*)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"IsHidden","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"ExecuteHook","params":"(asIScriptFunction* hook, ObjectCharacter* user, C* target, unsigned char actionIt)","attrs":0,"return_type":"std::string","visibility":"private","return_attrs":4,"doc":null}],"attributes":[{"name":"_dataTree","type":"DataTree","attrs":0,"visibility":"private","doc":null},{"name":"_equiped","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_script_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":null},{"name":"_script_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":null},{"name":"_actionHooks","type":"ActionsHooks","attrs":0,"visibility":"private","doc":null},{"name":"_hookUseOnCharacter","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_hookUseOnDoor","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_hookUseOnOthers","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_hookUseAsWeapon","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_hookCanWeild,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_hookCanWeildMouth,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Data"}],"doc":null},{"visibility":"public","name":"Inventory::Slot","decl":"struct","file":"include/level/level.hpp","namespaces":["Inventory"],"constructors":[],"methods":[{"name":"Slot","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"empty","type":"bool","attrs":0,"visibility":"public","doc":null},{"name":"mode","type":"char","attrs":8,"visibility":"public","doc":null},{"name":"object","type":"InventoryObject","attrs":1,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Inventory::Slots","decl":"struct","file":"include/level/level.hpp","namespaces":["Inventory"],"constructors":[],"methods":[{"name":"Slots","params":"(const std::string& name)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator=","params":"(const Slots& cpy)","attrs":0,"return_type":"Slots","visibility":"public","return_attrs":2,"doc":null},{"name":"operator==","params":"(const std::string& name)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator[]","params":"(unsigned int i)","attrs":4,"return_type":"Slot","visibility":"public","return_attrs":6,"doc":null},{"name":"operator[]","params":"(unsigned int i)","attrs":0,"return_type":"Slot","visibility":"public","return_attrs":2,"doc":null}],"attributes":[{"name":"name","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"slots","type":"std::vector<Slot>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Inventory","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Inventory","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"LoadInventory","params":"(DynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SaveInventory","params":"(DynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadInventory","params":"(Data)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SaveInventory","params":"(Data)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddObject","params":"(InventoryObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DelObject","params":"(InventoryObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IncludesObject","params":"(InventoryObject*)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetContent","params":"(void)","attrs":4,"return_type":"Content","visibility":"public","return_attrs":6,"doc":null},{"name":"GetContent","params":"(void)","attrs":0,"return_type":"Content","visibility":"public","return_attrs":2,"doc":null},{"name":"GetObject","params":"(const std::string& name)","attrs":0,"return_type":"InventoryObject","visibility":"public","return_attrs":1,"doc":null},{"name":"ContainsHowMany","params":"(const std::string& name)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetObjectIterator","params":"(InventoryObject* object)","attrs":4,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"GetCurrentWeight","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetCapacity","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"SetCapacity","params":"(unsigned short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CanCarry","params":"(InventoryObject*, unsigned short quantity = 1)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"InitializeSlots","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetConstItemSlot","params":"(const std::string& type_slot, unsigned int slot = 0)","attrs":4,"return_type":"Slot","visibility":"public","return_attrs":6,"doc":null},{"name":"GetItemSlot","params":"(const std::string& type_slot, unsigned int slot = 0)","attrs":0,"return_type":"Slot","visibility":"public","return_attrs":2,"doc":null},{"name":"SlotHasEquipedItem","params":"(const std::string& type_slot, unsigned int slot = 0)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetEquipedMode","params":"(const std::string& type_slot, unsigned int slot = 0)","attrs":4,"return_type":"char","visibility":"public","return_attrs":8,"doc":null},{"name":"GetEquipedItem","params":"(const std::string& type_slot, unsigned int slot = 0)","attrs":0,"return_type":"InventoryObject","visibility":"public","return_attrs":1,"doc":null},{"name":"SetEquipedItem","params":"(const std::string& type_slot, unsigned int slot, InventoryObject* object, unsigned char equip_mode = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEquipedItem","params":"(const std::string& type_slot, InventoryObject* object, unsigned char equip_mode = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"ContentChanged","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"UnequipedItem","type":"Sync::Signal<void (const std::string&, unsigned int, InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"EquipedItem","type":"Sync::Signal<void (const std::string&, unsigned int, InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"_content","type":"Content","attrs":0,"visibility":"private","doc":null},{"name":"_currentWeight","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"_capacity","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"_slots","type":"std::vector<Slots>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Controller for a character's inventory\n","detail":null}},{"visibility":"public","name":"Scriptable","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Scriptable","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Scriptable","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"LoadScript","params":"(std::string module_name, std::string filepath, asIScriptContext* context = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ReloadFunction","params":"(asIScriptFunction** pointer)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_script_context","type":"asIScriptContext","attrs":1,"visibility":"protected","doc":null},{"name":"_script_module","type":"asIScriptModule","attrs":1,"visibility":"protected","doc":null},{"name":"_script_func_ptrs","type":"ScriptFuncPtrs","attrs":0,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Component for class that must load and execute functions from scripts.\n","detail":null}},{"visibility":"public","name":"StatModel","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"StatModel","params":"(Data statsheet)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~StatModel","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Backup","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RestoreBackup","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Action","params":"(const std::string& action, const std::string& fmt, ...)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"GetAll","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"SetName","params":"(const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"SetRace","params":"(const std::string& race)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetRace","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"SetAge","params":"(unsigned short age)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetAge","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"SetGender","params":"(const std::string& g)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetGender","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"AddKill","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetKills","params":"(const std::string& race)","attrs":4,"return_type":"int","visibility":"public","return_attrs":8,"doc":null},{"name":"AddPerk","params":"(const std::string& perk)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"ToggleTrait","params":"(const std::string& trait)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ToggleSkillAffinity","params":"(const std::string& skill)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"HasTrait","params":"(const std::string& trait)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"HasSkillAffinity","params":"(const std::string& skill)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSkillAffinities","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"SetStatistic","params":"(const std::string& stat, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSpecial","params":"(const std::string& stat, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSkill","params":"(const std::string& stat, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetLevel","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetStatistic","params":"(const std::string& stat)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSpecial","params":"(const std::string& stat)","attrs":4,"return_type":"short","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSkill","params":"(const std::string& stat)","attrs":4,"return_type":"short","visibility":"public","return_attrs":0,"doc":null},{"name":"SelectRandomEncounter","params":"(void)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSpecialPoints","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetSkillPoints","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetPerksPoints","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetAvailablePerks","params":"(void)","attrs":0,"return_type":"std::list<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetAvailableTraits","params":"(void)","attrs":0,"return_type":"std::list<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetPerks","params":"(void)","attrs":4,"return_type":"std::list<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetTraits","params":"(void)","attrs":4,"return_type":"std::list<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetStatistics","params":"(void)","attrs":4,"return_type":"std::vector<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSpecials","params":"(void)","attrs":4,"return_type":"std::vector<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSkills","params":"(void)","attrs":4,"return_type":"std::vector<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetUsableSkills","params":"(bool on_self = false)","attrs":0,"return_type":"std::list<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetUsableSpells","params":"(bool on_self = false)","attrs":0,"return_type":"std::list<std::string>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetXpNextLevel","params":"(void)","attrs":0,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"GetExperience","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null},{"name":"SetExperience","params":"(unsigned short e)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LevelUp","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCurrentHp","params":"(short hp)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetCurrentHp","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":0,"doc":null},{"name":"GetMaxHp","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":0,"doc":null},{"name":"IsReady","params":"(void)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"UpdateAllValues","params":"(void)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadFunctions","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GetStatKeys","params":"(Data stats)","attrs":4,"return_type":"std::vector<std::string>","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"LevelUpped","type":"Sync::Signal<void (unsigned short)>","attrs":0,"visibility":"public","doc":null},{"name":"SpecialChanged,","type":"Sync::Signal<void (const std::string&, short)>","attrs":0,"visibility":"public","doc":null},{"name":"MaxHpChanged","type":"Sync::Signal<void (short)>","attrs":0,"visibility":"public","doc":null},{"name":"PerksChanged","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_statsheet","type":"Data","attrs":0,"visibility":"private","doc":null},{"name":"_statsheet_backup","type":"Data","attrs":0,"visibility":"private","doc":null},{"name":"_scriptAddSpecialPoint,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptXpNextLevel,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptIsReady,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_selectRandomEncounter","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptUsableSkills,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Scriptable"}],"doc":null},{"visibility":"public","name":"StatView","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"~StatView","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetEditMode","params":"(EditMode)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetEditMode","params":"(void)","attrs":0,"return_type":"EditMode","visibility":"public","return_attrs":0,"doc":null},{"name":"Hide","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Show","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetInformation","params":"(const std::string& name, const std::string& value)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetInformation","params":"(const std::string& name, short value)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFieldValue","params":"(const std::string& category, const std::string& key, const std::string& value)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFieldValue","params":"(const std::string& category, const std::string& key, short value)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCategoryFields","params":"(const std::string& category, const std::vector<std::string>& keys)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetIdValue","params":"(const std::string& id, const std::string& value)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetIdValue","params":"(const std::string& id, short value)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetExperience","params":"(unsigned int xp, unsigned short lvl, unsigned int next_level)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetTraits","params":"(std::list<std::string>)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetTraitActive","params":"(const std::string&, bool)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPerks","params":"(std::list<std::string>)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetAvailablePerks","params":"(std::list<std::string> perks)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSkillAffinity","params":"(const std::string& skill, bool)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetNumPerks","params":"(unsigned short n_perks)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"StatUpped,","type":"Sync::Signal<void (const std::string&, const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"InformationChanged","type":"Sync::Signal<void (const std::string&, const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"AgeChanged","type":"Sync::Signal<void (unsigned char)>","attrs":0,"visibility":"public","doc":null},{"name":"TraitToggled","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"PerkToggled","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"ToggleSkillAffinity","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"Accepted,","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_editMode","type":"EditMode","attrs":0,"visibility":"protected","doc":null},{"name":"_n_perks","type":"short","attrs":8,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"StatController","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"StatController","params":"(Data statsheet)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Model","params":"(void)","attrs":0,"return_type":"StatModel","visibility":"public","return_attrs":2,"doc":null},{"name":"Model","params":"(void)","attrs":4,"return_type":"StatModel","visibility":"public","return_attrs":6,"doc":null},{"name":"GetData","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"SetView","params":"(StatView*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UpSpecial","params":"(const std::string& stat)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DownSpecial","params":"(const std::string& stat)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSpecial","params":"(const std::string& stat, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetStatistic","params":"(const std::string& stat, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UpSkill","params":"(const std::string& stat)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DownSkill","params":"(const std::string& stat)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSkill","params":"(const std::string& stat, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddExperience","params":"(unsigned int experience)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCurrentHp","params":"(short hp)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"TriggerSkillAffinity","params":"(const std::string& stat, bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddKill","params":"(const std::string& race)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RunMetabolism","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetMaxHp","params":"(short hp)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SpecialChanged","params":"(const std::string&, short)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SkillChanged","params":"(const std::string&, short)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StatisticChanged","params":"(const std::string&, short)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"PerksChanged","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"TraitToggled","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SkillAffinityToggled","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"LevelChanged","params":"(unsigned short)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"InformationChanged","params":"(const std::string&, const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"AgeChanged","params":"(unsigned char)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"PerkAdded","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ViewStatUpped","params":"(const std::string&, const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ViewStatDowned","params":"(const std::string&, const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"AcceptChanges","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CancelChanges","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"MakeBackup","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"HpChanged","type":"Sync::Signal<void (short)>","attrs":0,"visibility":"public","doc":null},{"name":"LevelUp","type":"Sync::Signal<void (unsigned short)>","attrs":0,"visibility":"public","doc":null},{"name":"ChangesAccepted","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"ChangesCanceled","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_model","type":"StatModel","attrs":0,"visibility":"private","doc":null},{"name":"_view","type":"StatView","attrs":1,"visibility":"private","doc":null},{"name":"_viewObservers","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Controller of the MVC pattern used in CMAP (Cutie Mark Acquisition Program)\n","detail":null}},{"visibility":"private","name":"StatViewRocket::PerksDialog","decl":"struct","file":"include/level/level.hpp","namespaces":["StatViewRocket"],"constructors":[],"methods":[{"name":"PerksDialog","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~PerksDialog","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetAvailablePerks","params":"(std::list<std::string> perks)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPerkDescription","params":"(std::string description)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ClearPerksButtons","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetSelectedPerk","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackChoosePerk","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackCancel","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackDblClickPerk","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"PerkSelected","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"PerkChoosen","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"Cancel","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"SelectPerk","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"ChoosePerk","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"DblClickPerk","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_perks_buttons","type":"std::vector<Rocket::Core::Element*>","attrs":0,"visibility":"private","doc":null},{"name":"_selected_perk","type":"string","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":null},{"visibility":"public","name":"StatViewRocket","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"StatViewRocket","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~StatViewRocket","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetEditMode","params":"(EditMode)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Hide","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Show","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPartyMembers","params":"(const std::vector<std::string>& members)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetInformation","params":"(const std::string& name, const std::string& value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetInformation","params":"(const std::string& name, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFieldValue","params":"(const std::string& category, const std::string& key, const std::string& value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFieldValue","params":"(const std::string& category, const std::string& key, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetIdValue","params":"(const std::string& id, const std::string& value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetIdValue","params":"(const std::string& id, short value)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCategoryFields","params":"(const std::string& category, const std::vector<std::string>& keys)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetExperience","params":"(unsigned int, unsigned short, unsigned int)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetTraits","params":"(std::list<std::string>)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetTraitActive","params":"(const std::string&, bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetSkillAffinity","params":"(const std::string& skill, bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPerks","params":"(std::list<std::string>)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetAvailablePerks","params":"(std::list<std::string>)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Cancel","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Accept","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdateName","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdateGender","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdateAge","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"TraitClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SpecialClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SkillClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GeneralClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StatMore","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StatLess","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StatUpdate","params":"(Rocket::Core::Event& event, std::string& type, std::string& stat)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"SwapToPartyMember","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"_i18n","type":"Data","attrs":0,"visibility":"private","doc":null},{"name":"_perks_dialog","type":"PerksDialog","attrs":0,"visibility":"private","doc":null},{"name":"CancelButton","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"DoneButton","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"EventSpecialClicked,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"ButtonUp,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"PartyMemberClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"EventNameChanged,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"SpecialSelected,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_specialSelected","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_skillSelected","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_traitSelected","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_traits","type":"std::list<Rocket::Core::Element*>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"},{"visibility":"public","type":"StatView"}],"doc":null},{"visibility":"public","name":"CharacterBuff","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"CharacterBuff","params":"(Level*, ObjectCharacter* character, Data buff)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"CharacterBuff","params":"(Level* l)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const std::string& comp)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"Begin","params":"(ObjectCharacter* from, TimeManager::Task* task = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"End","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Load","params":"(Level*, ObjectCharacter*, Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Initialize","params":"(Level*, ObjectCharacter*, Data buff)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_buff","type":"Data","attrs":0,"visibility":"private","doc":null},{"name":"_timeManager","type":"TimeManager","attrs":2,"visibility":"private","doc":null},{"name":"_character","type":"ObjectCharacter","attrs":1,"visibility":"private","doc":null},{"name":"_duration","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"_task","type":"TimeManager::Task","attrs":1,"visibility":"private","doc":null},{"name":"_name","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":null},{"name":"_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":null},{"name":"_begin","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_end","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_graphicalEffect","type":"NodePath","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Instance of a buff placed on an [ObjectCharacter].\n","detail":null}},{"visibility":"public","name":"ObjectCharacter::FovEnemy","decl":"struct","file":"include/level/level.hpp","namespaces":["ObjectCharacter"],"constructors":[],"methods":[{"name":"FovEnemy","params":"(ObjectCharacter* enemy, unsigned char ttl)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"ObjectCharacter*","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(ObjectCharacter* comp)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"enemy","type":"ObjectCharacter","attrs":1,"visibility":"public","doc":{"name":"ttl","short":"Time to live, determine how much field of view checks will be executed before the character loses track of this target"}},{"name":"ttl","type":"char","attrs":8,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Represents a character detected by another character\n","detail":null}},{"visibility":"private","name":"ObjectCharacter::ItemEquiped","decl":"struct","file":"include/level/level.hpp","namespaces":["ObjectCharacter"],"constructors":[],"methods":[{"name":"ItemEquiped","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"actionIt","type":"char","attrs":8,"visibility":"public","doc":null},{"name":"mode","type":"EquipedMode","attrs":0,"visibility":"public","doc":null},{"name":"equiped","type":"InventoryObject","attrs":1,"visibility":"public","doc":null},{"name":"default_","type":"InventoryObject","attrs":1,"visibility":"public","doc":null},{"name":"graphics","type":"InventoryObject::EquipedModel","attrs":1,"visibility":"public","doc":null},{"name":"jointHorn,","type":"NodePath","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Controller for an item that is equiped by a character.\n","detail":null}},{"visibility":"public","name":"ObjectCharacter","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ObjectCharacter","params":"(Level* level, DynamicObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"ObjectCharacter"}},{"name":"~ObjectCharacter","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~ObjectCharacter"}},{"name":"Load","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Load"}},{"name":"Save","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Save"}},{"name":"SetStatistics","params":"(DataTree* stats, StatController* statsController)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetStatistics","short":"Sets the pointer to the statistic datatree and controllers to those passed as parameter. If these\nvalues are already set, destroys the previous instances first.\n"}},{"name":"NullifyStatistics","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"NullifyStatistics","short":"Sets the pointers to the statistic datatree and controller to null. Does not destroy them."}},{"name":"GetGoToData","params":"(InstanceDynamicObject* character)","attrs":64,"return_type":"GoToData","visibility":"public","return_attrs":0,"doc":{"name":"GetGoToData"}},{"name":"SetInventory","params":"(Inventory* inventory)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetInventory"}},{"name":"ProcessCollisions","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"statistics"}},{"name":"Run","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"ProcessCollisions","short":"Overload of the [WaypointModifier]'s ProcessCollisions. Ensure that the character does not block\npathes when he's dead.\n"}},{"name":"LookAt","params":"(LVecBase3)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Run","short":"Procedure run once every frame if the level is running, never if it is interrupted, and in combat run\nonly when it is the character's instance turn to play.\n"}},{"name":"LookAt","params":"(InstanceDynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"LookAt"}},{"name":"GoTo","params":"(unsigned int id)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"LookAt"}},{"name":"GoTo","params":"(Waypoint* waypoint)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"GoTo"}},{"name":"GoTo","params":"(InstanceDynamicObject* object, int max_distance = 0)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"GoTo"}},{"name":"GoToRandomWaypoint","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"GoTo"}},{"name":"TruncatePath","params":"(unsigned short max_length)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"GoToRandomWaypoint","short":"Sets up the character to go one waypoint away in a random direction"}},{"name":"GetPath","params":"(Waypoint* waypoint)","attrs":0,"return_type":"std::list<Waypoint>","visibility":"public","return_attrs":0,"doc":{"name":"TruncatePath","short":"If the path the [ObjectCharacter] is following is longer than the given value, it is reduced to the given value"}},{"name":"GetPathDistance","params":"(Waypoint* waypoint)","attrs":0,"return_type":"short","visibility":"public","return_attrs":8,"doc":{"name":"GetPathDistance","short":"Get the shortest path from the current [ObjectCharacter] to the [Waypoint]'s."}},{"name":"GetPathDistance","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"short","visibility":"public","return_attrs":8,"doc":{"name":"GetPathDistance","short":"Get the shortest path from the current [ObjectCharacter] to the [InstanceDyanamicObject]'s position"}},{"name":"GetDistance","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"float","visibility":"public","return_attrs":0,"doc":{"name":"GetDistance","short":"Returns the physical distance between the [InstanceDynamicObject] and the current [ObjectCharacter]"}},{"name":"GetBestWaypoint","params":"(InstanceDynamicObject* object, bool farthest)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":{"name":"GetBestWaypoint"}},{"name":"GetNearestWaypoint","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":{"name":"GetNearestWaypoint"}},{"name":"GetFarthestWaypoint","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":{"name":"GetFarthestWaypoint"}},{"name":"GetPathSize","params":"(void)","attrs":4,"return_type":"int","visibility":"public","return_attrs":8,"doc":{"name":"GetPathSize","short":"Returns the length of the path currently being followed by a moving [ObjectCharacter]."}},{"name":"HasLineOfSight","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"HasLineOfSight","short":"Returns true if the [ObjectCharacter] can see the target passed as parameter."}},{"name":"IsMoving","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"IsMoving","short":"Returns true if the [ObjectCharacter] is currently moving."}},{"name":"IsAlive","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"IsAlive","short":"Returns true if the [ObjectCharacter] is alive (hit points > 0)."}},{"name":"IsInterrupted","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"IsInterrupted"}},{"name":"GetInventory","params":"(void)","attrs":0,"return_type":"Inventory","visibility":"public","return_attrs":2,"doc":{"name":"GetInventory"}},{"name":"GetStatistics","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":{"name":"GetStatistics"}},{"name":"GetStatController","params":"(void)","attrs":0,"return_type":"StatController","visibility":"public","return_attrs":1,"doc":{"name":"GetStatControler"}},{"name":"GetFactionName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":{"name":"GetFactionName"}},{"name":"GetFaction","params":"(void)","attrs":4,"return_type":"int","visibility":"public","return_attrs":8,"doc":{"name":"GetFaction"}},{"name":"GetActionPoints","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":{"name":"GetActionPoints"}},{"name":"SetActionPoints","params":"(unsigned short ap)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetActionPoints"}},{"name":"RestartActionPoints","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"RestartActionPoints"}},{"name":"GetHitPoints","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":0,"doc":{"name":"GetHitPoints"}},{"name":"SetHitPoints","params":"(short hp)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetHitPoints"}},{"name":"StatHpUpdate","params":"(short)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"StatHpUpdate"}},{"name":"GetArmorClass","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":0,"doc":{"name":"GetArmorClass"}},{"name":"SetArmorClass","params":"(short ac)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetArmorClass"}},{"name":"RestartArmorClass","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"RestartArmorClass"}},{"name":"SetBonusAC","params":"(short ac)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetBonusAC"}},{"name":"SetFurtive","params":"(bool do_set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"PlayEquipedItemAnimation"}},{"name":"SetVisible","params":"(bool do_set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetEquipedItem"}},{"name":"AddFlag","params":"(unsigned char flag)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"GetEquipedItem"}},{"name":"DelFlag","params":"(unsigned char flag)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"GetEquipedAction"}},{"name":"HasFlag","params":"(unsigned char flag)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"UnequipItem"}},{"name":"PlayEquipedItemAnimation","params":"(unsigned short it, const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"ItemNextUseType"}},{"name":"RefreshEquipment","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"PushBuff"}},{"name":"SetEquipedItem","params":"(unsigned short it, InventoryObject* object, EquipedMode mode = EquipedMouth)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"DelBuff"}},{"name":"GetEquipedItem","params":"(unsigned short it)","attrs":0,"return_type":"InventoryObject","visibility":"public","return_attrs":1,"doc":{"name":"CheckFieldOfView"}},{"name":"GetequipedAction","params":"(unsigned short it)","attrs":4,"return_type":"char","visibility":"public","return_attrs":8,"doc":{"name":"SetFaction"}},{"name":"UnequipItem","params":"(unsigned short it)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetFaction"}},{"name":"ItemNextUseType","params":"(unsigned short it)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetAsEnemy"}},{"name":"PushBuff","params":"(Data, ObjectCharacter* caster)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"IsEnemy"}},{"name":"DelBuff","params":"(CharacterBuff* buff)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"IsAlly"}},{"name":"CheckFieldOfView","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEnemyDetected","params":"(ObjectCharacter*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFaction","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFaction","params":"(unsigned int flag)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetAsEnemy","params":"(const ObjectCharacter*, bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsEnemy","params":"(const ObjectCharacter*)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"IsAlly","params":"(const ObjectCharacter*)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetNearbyEnemies","params":"(void)","attrs":4,"return_type":"Script::StdList<ObjectCharacter*>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetNearbyAllies","params":"(void)","attrs":4,"return_type":"Script::StdList<ObjectCharacter*>","visibility":"public","return_attrs":0,"doc":null},{"name":"RequestAttack","params":"(ObjectCharacter* attack, ObjectCharacter* from)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RequestHeal","params":"(ObjectCharacter* heal, ObjectCharacter* from)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RequestFollow","params":"(ObjectCharacter* follow, ObjectCharacter* from)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RequestStopFollowing","params":"(ObjectCharacter* follow, ObjectCharacter* from)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AskMorale","params":"(void)","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"SendMessage","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RunMovement","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RunMovementNext","params":"(float elaspedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RunDeath","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Fading","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StartRunAnimation","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StopRunAnimation","params":"(InstanceDynamicObject*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RequestCharacter","params":"(ObjectCharacter*, ObjectCharacter*, asIScriptFunction*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackActionUse","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"DebugPathfinding","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"ReachedDestination","type":"Sync::Signal<void (InstanceDynamicObject*)>","attrs":0,"visibility":"public","doc":{"name":"ReachedDestination","short":"Signal emitted when the player reaches its destination.","desc":"After calling a GoTo method, it is possible to hook a callback to the ReachedDestination callback.<br/>Note that if for some reason the character changes of course, the callback will never be called."}},{"name":"ActionPointChanged","type":"Sync::Signal<void (unsigned short, unsigned short)>","attrs":0,"visibility":"public","doc":{"name":"ActionPointChanged","short":"Signal emitted when the amount of action points of the character needs to be updated."}},{"name":"HitPointsChanged","type":"Sync::Signal<void (short)>","attrs":0,"visibility":"public","doc":{"name":"HitPointsChanged","short":"Signal emitted when the amount of hit points of the character needs to be updated."}},{"name":"CharacterDied","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":{"name":"CharacterDied"}},{"name":"ArmorClassChanged","type":"Sync::Signal<void (short)>","attrs":0,"visibility":"public","doc":{"name":"ArmorClassChanged"}},{"name":"EquipedItemChanged","type":"Sync::Signal<void (unsigned short, InventoryObject*)>","attrs":0,"visibility":"public","doc":{"name":"EquipedItemChanged","short":"Signal emitted when the character equips a new item"}},{"name":"EquipedItemActionChanged","type":"Sync::Signal<void (unsigned short, InventoryObject*, unsigned char)>","attrs":0,"visibility":"public","doc":{"name":"EquipedItemActionChanged","short":"Signal emitted when the character asks to use another type of action with his weapon."}},{"name":"_obs_handler","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null},{"name":"_character","type":"PointerTo< Character >","attrs":0,"visibility":"private","doc":null},{"name":"_path","type":"std::list<Waypoint>","attrs":0,"visibility":"private","doc":null},{"name":"_goToData","type":"GoToData","attrs":0,"visibility":"private","doc":null},{"name":"_statistics","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_stats","type":"StatController","attrs":1,"visibility":"private","doc":null},{"name":"_faction","type":"WorldDiplomacy::Faction","attrs":5,"visibility":"private","doc":null},{"name":"_self_enemyMask","type":"int","attrs":8,"visibility":"private","doc":null},{"name":"_actionPoints","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"_hitPoints,","type":"short","attrs":0,"visibility":"private","doc":null},{"name":"_flags","type":"char","attrs":8,"visibility":"private","doc":null},{"name":"_fading_off,","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"active_object","type":"InventoryObject","attrs":1,"visibility":"public","doc":null},{"name":"active_object_it","type":"short","attrs":8,"visibility":"public","doc":null},{"name":"_inventory","type":"Inventory","attrs":1,"visibility":"private","doc":null},{"name":"_equiped[2]","type":"ItemEquiped","attrs":0,"visibility":"private","doc":null},{"name":"_buffs","type":"std::list<CharacterBuff*>","attrs":0,"visibility":"private","doc":null},{"name":"_losPath","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_losRay","type":"PointerTo< CollisionSegment >","attrs":0,"visibility":"private","doc":null},{"name":"_losNode","type":"PointerTo< CollisionNode >","attrs":0,"visibility":"private","doc":null},{"name":"_losHandlerQueue","type":"PointerTo< CollisionHandlerQueue >","attrs":0,"visibility":"private","doc":null},{"name":"_losTraverser","type":"CollisionTraverser","attrs":0,"visibility":"private","doc":null},{"name":"_fovTargetSphere","type":"PointerTo< CollisionSphere >","attrs":0,"visibility":"private","doc":null},{"name":"_fovTargetNode","type":"PointerTo< CollisionNode >","attrs":0,"visibility":"private","doc":null},{"name":"_fovTargetNp","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_fovNeedsUpdate","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_fovSphere","type":"PointerTo< CollisionSphere >","attrs":0,"visibility":"private","doc":null},{"name":"_fovNode","type":"PointerTo< CollisionNode >","attrs":0,"visibility":"private","doc":null},{"name":"_fovNp","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_fovHandlerQueue","type":"PointerTo< CollisionHandlerQueue >","attrs":0,"visibility":"private","doc":null},{"name":"_fovTraverser","type":"CollisionTraverser","attrs":0,"visibility":"private","doc":null},{"name":"_fovEnemies","type":"std::list<FovEnemy>","attrs":0,"visibility":"private","doc":null},{"name":"_fovAllies","type":"std::list<ObjectCharacter*>","attrs":0,"visibility":"private","doc":null},{"name":"_scriptMain","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptFight","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptRequestAttack,","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptAskMorale","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_scriptSendMessage","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InstanceDynamicObject"},{"visibility":"public","type":"Scriptable"}],"doc":{"overview":"Controls the logical and displaying parts of a character or NPC.\n","detail":null}},{"visibility":"public","name":"AngelScript::ContextLock","decl":"struct","file":"include/level/level.hpp","namespaces":["AngelScript"],"constructors":[],"methods":[{"name":"ContextLock","params":"(asIScriptContext* context, asIScriptModule* module, AngelScript::Object* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"ContextLock","short":"Constructing this object will lock the context, module and object sent as parameters."}},{"name":"~ContextLock","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~ContextLock","short":"Destructing this object will restitute the previous locked context, if there was any."}},{"name":"Context","params":"(void)","attrs":16,"return_type":"asIScriptContext","visibility":"public","return_attrs":1,"doc":{"name":"Context","short":"Returns the currently locked script context"}},{"name":"Module","params":"(void)","attrs":16,"return_type":"asIScriptModule","visibility":"public","return_attrs":1,"doc":{"name":"Module","short":"Returns the currently locked script module"}},{"name":"CurrentObject","params":"(void)","attrs":16,"return_type":"Object","visibility":"public","return_attrs":1,"doc":{"name":"CurrentObject","short":"When using [AngelScript::Object], returns the currently locked script object. Otherwise, returns zero."}}],"attributes":[{"name":"old_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":{"name":"old_context","short":"stores the context that was locked before this instance was created"}},{"name":"old_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":{"name":"old_module","short":"stores the module that was locked before this instance was created"}},{"name":"current_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":{"name":"current_context","short":"stores the context currently locked"}},{"name":"current_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":{"name":"current_module","short":"stores the module currently locked"}},{"name":"old_object","type":"AngelScript::Object","attrs":1,"visibility":"private","doc":{"name":"old_object","short":"stores the object that was locked before this instance was created"}},{"name":"current_object","type":"AngelScript::Object","attrs":1,"visibility":"private","doc":{"name":"current_object","short":"stores the object currently locked"}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"This class can be called before calling an AngelScript function in order to store the current context and module. Class methods can then be used by the C++ bindings in order to know which context and module called them (warning: does not work with threads. Yet. Need to re-implement ThreadSingleton)\n","detail":null}},{"visibility":"public","name":"AngelScript::Exception","decl":"struct","file":"include/level/level.hpp","namespaces":["AngelScript"],"constructors":[],"methods":[{"name":"Exception","params":"(Code code, const std::string& target = \"\")","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Constructor"}},{"name":"what","params":"()","attrs":4,"return_type":"char","visibility":"public","return_attrs":5,"doc":{"name":"what","short":"returns a message describing the error"}}],"attributes":[{"name":"message","type":"std::string","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"std::exception"}],"doc":{"overview":"Exception thrown by [AngelScript::Object] when something goes wrong while calling or loading a script. It implements [std::exception].\n","detail":null}},{"visibility":"public","name":"AngelScript::TypeFlags","decl":"struct","file":"include/level/level.hpp","namespaces":["AngelScript"],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"AngelScript::IType","decl":"struct","file":"include/level/level.hpp","namespaces":["AngelScript"],"constructors":[],"methods":[{"name":"~IType","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Flag","params":"(void)","attrs":68,"return_type":"char","visibility":"public","return_attrs":8,"doc":null},{"name":"Ptr","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":1,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"AngelScript::Type","decl":"class","file":"include/level/level.hpp","namespaces":["AngelScript"],"constructors":[],"methods":[{"name":"Type","params":"(TYPE value)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"TYPE","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"Flag","params":"(void)","attrs":4,"return_type":"char","visibility":"public","return_attrs":8,"doc":null},{"name":"Ptr","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":1,"doc":null}],"attributes":[{"name":"value","type":"TYPE","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"IType"}],"doc":{"overview":"This wrapper must be used when passing parameters to AngelScript::Object::Call. They are used to properly cast the parameters and send them to AngelScript with the proper flags.\n","detail":null}},{"visibility":"private","name":"AngelScript::Object::Function","decl":"struct","file":"include/level/level.hpp","namespaces":["AngelScript","Object"],"constructors":[],"methods":[],"attributes":[{"name":"signature","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"function","type":"asIScriptFunction","attrs":1,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Structure containing the signature of a script function and the pointer to its AngelScript handle, if it was already loaded.\n","detail":null}},{"visibility":"public","name":"AngelScript::Object::ReturnType","decl":"struct","file":"include/level/level.hpp","namespaces":["AngelScript","Object"],"constructors":[],"methods":[{"name":"ReturnType","params":"(asIScriptContext* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"TYPE","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"bool","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"int","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"long","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"float","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null},{"name":"double","params":"()","attrs":4,"return_type":"operator","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"context","type":"asIScriptContext","attrs":1,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Wrapper returned by AngelScript::Object::Call which allows to cast the return type to bool, int, long, float, double or a pointer to any type.\n","detail":null}},{"visibility":"public","name":"AngelScript::Object","decl":"class","file":"include/level/level.hpp","namespaces":["AngelScript"],"constructors":[],"methods":[{"name":"Object","params":"(const std::string& filepath)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Constructor","short":"Create a new script context and loads a script from the path given as a parameter."}},{"name":"Object","params":"(asIScriptContext* context, const std::string& filepath)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Constructor2","short":"Load a script and run it in an existing context."}},{"name":"~Object","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Destructor"}},{"name":"Initialize","params":"(void)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":{"name":"Initialize","short":"Loads the script file, creates a context and module","desc":"This method is already called in the constructor. You will only need it if for some reason you need to reload the script."}},{"name":"asDefineMethod","params":"(const std::string& name, const std::string& declaration)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"asDefineMethod","short":"Before calling a function, you shall use this method to define it.","desc":"The first parameter is an [std::string] which will be used an an alias to the method you are defining.<br />The second parameter is the signature of the function.<br/><br/>Example:<br/><pre>object.asDefineMethod(\"my_method\", \"bool my_method(string)\");</pre>"}},{"name":"Call","params":"(const std::string& name, unsigned int argc = 0, ...)","attrs":0,"return_type":"ReturnType","visibility":"public","return_attrs":0,"doc":{"name":"Call","short":"Attempts to call the matching function.","desc":"The first argument must be the alias defined for the function with asDefinedMethod.<br /> The second parameter is the number of arguments the method takes.<br/> Any other parameters passed to this method must be wrapped in the [AngelScript::Type] object.<br/> It returns an [AngelScript::Object::ReturnType] object that can be casted to what it is supposed to be.<br/><br/> Example:<br /> <pre>void call_my_function(AngelScript::Object& object)<br/> {<br/> std::string                     _str(\"Coucou\");<br/> AngelScript::Type&lt;int&gt;          number(42);<br/> AngelScript::Type&lt;std::string*&gt; str(&_str);<br/>\nobject.asDefineMethod(\"my_function\", \"bool my_function(int, string)\");<br/> // As the next line shows, the return type of Call can be casted<br/> // directly to bool. Same goes for int, long, float, double, and any pointer.<br/> bool = object.Call(\"my_function\", 2, &number, &str);<br/> }</pre>"}}],"attributes":[{"name":"filepath","type":"std::string","attrs":4,"visibility":"private","doc":{"name":"filepath","short":"Path to the AngelScript source file."}},{"name":"context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":{"name":"context","short":"Context in which the source file is running."}},{"name":"module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":{"name":"module","short":"Module containing the compiled AngelScript source."}},{"name":"functions","type":"Functions","attrs":0,"visibility":"private","doc":{"name":"functions","short":"List of the methods defined with asDefinedMethod."}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"An interface for AngelScript files. It represent a file as an object with which you define and call methods.\n","detail":null}},{"visibility":"public","name":"AngelScript","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"UiObjectQuantityPicker","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiObjectQuantityPicker","params":"(WindowFramework* window, Rocket::Core::Context* context, const Inventory& inventory, const InventoryObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiObjectQuantityPicker","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Accepted","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Increment","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GetQuantity","params":"(void)","attrs":4,"return_type":"short","visibility":"private","return_attrs":8,"doc":null},{"name":"SetQuantity","params":"(unsigned short)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"QuantityPicked","type":"Sync::Signal<void (unsigned short)>","attrs":0,"visibility":"public","doc":null},{"name":"Canceled","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"Observer","type":"Sync::ObserverHandler","attrs":0,"visibility":"public","doc":null},{"name":"EventAccepted,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"EventValueChanged","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_max_quantity","type":"short","attrs":8,"visibility":"private","doc":null},{"name":"_line_edit","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for picking quantities when moving objects from an inventory to another.\n","detail":null}},{"visibility":"public","name":"InventoryView","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"InventoryView","params":"(Rocket::Core::Element* element, Inventory& inventory)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~InventoryView","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(Rocket::Core::Element* element)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"UpdateView","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetObjectFromId","params":"(const std::string& id)","attrs":0,"return_type":"InventoryObject","visibility":"public","return_attrs":1,"doc":null},{"name":"ProcessEvent","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetInventory","params":"(void)","attrs":0,"return_type":"Inventory","visibility":"public","return_attrs":2,"doc":null}],"attributes":[{"name":"ObjectDropped","type":"Sync::Signal<void (InventoryView*, Rocket::Core::Element*)>","attrs":0,"visibility":"public","doc":null},{"name":"ObjectSelected","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"ObjectMenuRequested","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"ObjectFocused","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"_element","type":"Rocket::Core::Element","attrs":2,"visibility":"private","doc":null},{"name":"_inventory","type":"Inventory","attrs":2,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Rocket::Core::EventListener"}],"doc":{"overview":"View for the Inventory MVC UI.\n","detail":null}},{"visibility":"public","name":"InventoryViewController","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"AddView","params":"(Rocket::Core::Element* element, Inventory& inventory)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DragObserver","params":"(InventoryView* container, Rocket::Core::Element* element)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Update","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AllowDrop","params":"(InventoryView& from, InventoryView& to)","attrs":64,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"CanSwap","params":"(InventoryObject* object)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCanSwap","params":"(std::function<bool (InventoryObject*)> can_swap)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"ObjectSelected","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"ObjectMenuRequested","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"ObjectFocused","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"_views","type":"std::vector<InventoryView*>","attrs":0,"visibility":"private","doc":null},{"name":"_allow_drop","type":"std::function<bool (InventoryView&, InventoryView&)>","attrs":0,"visibility":"private","doc":null},{"name":"_can_swap","type":"std::function<bool (InventoryObject*)>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Controller for the Inventory MVC UI.\n","detail":null}},{"visibility":"public","name":"UiUseObjectOn","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiUseObjectOn","params":"(WindowFramework* window, Rocket::Core::Context* context, Inventory& inventory)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiUseObjectOn","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RocketCancelClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"ActionCanceled","type":"Sync::Signal<void ()>","attrs":0,"visibility":"public","doc":null},{"name":"ObjectSelected","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"CancelClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_viewController","type":"InventoryViewController","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI used when the player ask to use an object on a [DynamicObject].\n","detail":null}},{"visibility":"public","name":"UiUseSkillOn","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiUseSkillOn","params":"(WindowFramework* window, Rocket::Core::Context* context, ObjectCharacter* player, InstanceDynamicObject* target)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiUseSkillOn","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"Closed","type":"Sync::Signal<void ()>","attrs":0,"visibility":"public","doc":null},{"name":"SkillPicked","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"EventCloseClicked,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"skill_picked","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"skill_list","type":"std::list<std::string>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":null},{"visibility":"public","name":"UiBarter","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiBarter","params":"(WindowFramework* window, Rocket::Core::Context* context, ObjectCharacter* player, ObjectCharacter* other)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiBarter","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"AllowDrop","params":"(InventoryView& from, InventoryView& to)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SwapObjects","params":"(InventoryObject* object)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"MakeDeal","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"BarterEnd","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdateInterface","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdateInterfaceSide","params":"(Rocket::Core::Element* e, Inventory::Content&, StatController*, StatController*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GetStackValue","params":"(Inventory::Content&, StatController*, StatController*)","attrs":0,"return_type":"int","visibility":"private","return_attrs":0,"doc":null},{"name":"DropInventory","params":"(Inventory& from, Inventory& to)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SwapFunctor","params":"(InventoryObject* object, Inventory& from, Inventory& to)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"BarterEnded","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"EventMakeDeal,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_stack_player,","type":"Inventory","attrs":0,"visibility":"private","doc":null},{"name":"_stats_player,","type":"StatController","attrs":1,"visibility":"private","doc":null},{"name":"_inventory_player","type":"Inventory","attrs":2,"visibility":"private","doc":null},{"name":"_inventory_other","type":"Inventory","attrs":2,"visibility":"private","doc":null},{"name":"_quantity_picker","type":"UiObjectQuantityPicker","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"},{"visibility":"public","type":"InventoryViewController"}],"doc":{"overview":"UI used when characters are bartering.\n","detail":null}},{"visibility":"public","name":"UiLoot","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiLoot","params":"(WindowFramework* window, Rocket::Core::Context* context, Inventory& looter, Inventory& looted)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiLoot","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetScriptObject","params":"(ObjectCharacter* user, InstanceDynamicObject* target, asIScriptContext* context, const std::string& filepath)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CanSwap","params":"(InventoryObject*)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"SwapObjects","params":"(InventoryObject* object)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RocketDoneClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RocketTakeAllClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"Done","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"DoneClicked,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_viewController","type":"InventoryViewController","attrs":0,"visibility":"private","doc":null},{"name":"_quantity_picker","type":"UiObjectQuantityPicker","attrs":1,"visibility":"private","doc":null},{"name":"_looter","type":"Inventory","attrs":2,"visibility":"private","doc":null},{"name":"_looted","type":"Inventory","attrs":2,"visibility":"private","doc":null},{"name":"as_object","type":"AngelScript::Object","attrs":1,"visibility":"private","doc":null},{"name":"target_object","type":"InstanceDynamicObject","attrs":1,"visibility":"private","doc":null},{"name":"user_character","type":"ObjectCharacter","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"},{"visibility":"public","type":"Scriptable"}],"doc":{"overview":"UI used when the player is looting other inventories (bodies, lockers, etc).\n","detail":null}},{"visibility":"public","name":"UiEquipMode","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiEquipMode","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiEquipMode","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"AddOption","params":"(unsigned char code, const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Initialize","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackCancel","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ListenButtons","params":"(bool)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"EquipModeSelected","type":"Sync::Signal<void (unsigned char)>","attrs":0,"visibility":"public","doc":null},{"name":"Closed","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"ModeClicked,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"root_choices","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for picking the way a character will yield an object.\n","detail":null}},{"visibility":"public","name":"UiNextZone","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiNextZone","params":"(WindowFramework* window, Rocket::Core::Context* context, const std::vector<std::string> zones)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiNextZone","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackLevelSelected","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackCancel","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"NextZoneSelected","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"Cancel","type":"Sync::Signal<void (void)>","attrs":0,"visibility":"public","doc":null},{"name":"LevelSelected,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_elements","type":"std::vector<Rocket::Core::Element*>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI used to pick the next zone when leaving a level. Used only when several choices are availables.\n","detail":null}},{"visibility":"public","name":"GameInventory","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameInventory","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GameInventory","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetInventory","params":"(Inventory&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UpdateInventory","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEquipedItem","params":"(unsigned short slot, InventoryObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UpdateInventoryCapacity","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetSelectedObject","params":"(InventoryObject*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ListenEquipModes","params":"(bool)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ListenDropables","params":"(bool)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackButtonUse","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackButtonDrop","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackSwapEquipMode","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CallbackDropEvent","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"EquipItem","type":"Sync::Signal<void (const std::string& slot, unsigned short, InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"UnequipItem","type":"Sync::Signal<void (const std::string& slot, unsigned short)>","attrs":0,"visibility":"public","doc":null},{"name":"SwapEquipMode","type":"Sync::Signal<void (unsigned short, EquipedMode)>","attrs":0,"visibility":"public","doc":null},{"name":"UseObject","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"DropObject","type":"Sync::Signal<void (InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"CombineObjects","type":"Sync::Signal<void (InventoryObject*, InventoryObject*)>","attrs":0,"visibility":"public","doc":null},{"name":"DropEvent","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"ButtonUseClicked,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_inventory","type":"Inventory","attrs":1,"visibility":"private","doc":null},{"name":"_inventoryView","type":"InventoryViewController","attrs":0,"visibility":"private","doc":null},{"name":"_selectedObject","type":"InventoryObject","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for the player's inventory.\n","detail":null}},{"visibility":"public","name":"GameConsole","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameConsole","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GameConsole","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Show","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Hide","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Get","params":"()","attrs":16,"return_type":"GameConsole","visibility":"public","return_attrs":2,"doc":null},{"name":"WriteOn","params":"(const std::string& string)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ListFunctions","params":"()","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PrintScenegraph","params":"()","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PrintChildren","params":"(const NodePath& n, int lvl)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Toggle","params":"(const Event*, void* data)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"KeyUp","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Execute","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Output","params":"(const std::string str)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"GConsole","type":"GameConsole","attrs":1,"visibility":"public","doc":null},{"name":"ConsoleKeyUp","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"ExecuteEvent","type":"RocketListener","attrs":0,"visibility":"public","doc":null},{"name":"_history","type":"std::vector<std::string>","attrs":0,"visibility":"private","doc":null},{"name":"_histIter","type":"vector<std::string>::iterator","attrs":0,"visibility":"private","doc":null},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_root","type":"Rocket::Core::ElementDocument","attrs":1,"visibility":"private","doc":null},{"name":"_input","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_currentLine","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_script_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":null},{"name":"_observerError","type":"Sync::ObserverId","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI and controls for the console.\n","detail":null}},{"visibility":"public","name":"GameUi","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameUi","params":"(WindowFramework* window, PointerTo< RocketRegion > rocket)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GameUi","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetContext","params":"()","attrs":0,"return_type":"Rocket::Core::Context","visibility":"public","return_attrs":1,"doc":null},{"name":"GetMenu","params":"(void)","attrs":0,"return_type":"GameMenu","visibility":"public","return_attrs":2,"doc":null},{"name":"GetInventory","params":"(void)","attrs":0,"return_type":"GameInventory","visibility":"public","return_attrs":2,"doc":null},{"name":"GetPers","params":"(void)","attrs":0,"return_type":"StatViewRocket","visibility":"public","return_attrs":2,"doc":null},{"name":"OpenMenu","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"OpenInventory","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"OpenPers","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetRocketRegion","params":"(void)","attrs":0,"return_type":"PointerTo< RocketRegion >","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"OpenPipbuck","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"_rocket","type":"PointerTo< RocketRegion >","attrs":0,"visibility":"private","doc":null},{"name":"_console","type":"GameConsole","attrs":1,"visibility":"private","doc":null},{"name":"_menu","type":"GameMenu","attrs":1,"visibility":"private","doc":null},{"name":"_inventory","type":"GameInventory","attrs":1,"visibility":"private","doc":null},{"name":"_pers","type":"StatViewRocket","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Container for global UIs relevant to a GameTask instance (console, menu, inventory and character stats).\n","detail":null}},{"visibility":"public","name":"Sync::FunctorThreadFoo","decl":"struct","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Sync::FunctorThread","decl":"class","file":"include/level/level.hpp","namespaces":["Sync"],"constructors":[],"methods":[{"name":"Set","params":"(std::function<RETURN (void)> functor)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":64,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"Create","params":"(std::function<RETURN (void)> functor)","attrs":16,"return_type":"FunctorThread","visibility":"public","return_attrs":1,"doc":null},{"name":"FunctorThread","params":"(void)","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"~FunctorThread","params":"(void)","attrs":64,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"RunFunctor","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"Done","type":"Sync::Signal<typename FunctorThreadFoo<RETURN>::callback_fptr>","attrs":0,"visibility":"public","doc":null},{"name":"functor","type":"std::function<RETURN (void)>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"MyThread"}],"doc":null},{"visibility":"public","name":"Sync","decl":"namespace","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"LoadingScreen","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"LoadingScreen","params":"(WindowFramework*, Rocket::Core::Context* rocket)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~LoadingScreen","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"AppendText","params":"(const std::string& str)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Refresh","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"thread","type":"Sync::FunctorThread<void>","attrs":1,"visibility":"private","doc":null},{"name":"done","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"},{"visibility":"public","type":"Sync::Semaphore"}],"doc":{"overview":"UI for the loading screen.\n","detail":null}},{"visibility":"public","name":"LevelUi","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"LevelUi","params":"(WindowFramework* window, GameUi& gameUi)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~LevelUi","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetContext","params":"()","attrs":0,"return_type":"Rocket::Core::Context","visibility":"public","return_attrs":1,"doc":null},{"name":"GetMainBar","params":"(void)","attrs":0,"return_type":"GameMainBar","visibility":"public","return_attrs":2,"doc":null},{"name":"GetMenu","params":"(void)","attrs":0,"return_type":"GameMenu","visibility":"public","return_attrs":2,"doc":null},{"name":"GetInventory","params":"(void)","attrs":0,"return_type":"GameInventory","visibility":"public","return_attrs":2,"doc":null},{"name":"GetPers","params":"(void)","attrs":0,"return_type":"StatViewRocket","visibility":"public","return_attrs":2,"doc":null}],"attributes":[{"name":"InterfaceOpened","type":"Sync::Signal<void (bool)>","attrs":0,"visibility":"public","doc":null},{"name":"_gameUi","type":"GameUi","attrs":2,"visibility":"private","doc":null},{"name":"_mainBar","type":"GameMainBar","attrs":1,"visibility":"private","doc":null},{"name":"_obs","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Container for all the [Level] specific parts of the interface.\n","detail":null}},{"visibility":"public","name":"GameOptions","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameOptions","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GameOptions","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetLanguage","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetResolution","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetQuality","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ToggleFullscreen","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"ExitClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"LanguageSelected,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_language_options","type":"std::list<Rocket::Core::Element*>","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI giving access of the [OptionManager] values to the player.\n","detail":null}},{"visibility":"public","name":"AlertUi","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"AlertUi","params":"(WindowFramework* window, Rocket::Core::Context* context, const std::string& message)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~AlertUi","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"NewAlert","type":"Sync::Signal<void (const std::string)>","attrs":0,"visibility":"public","doc":null},{"name":"ButtonClicked","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_continue","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"Creates alerts to warn the user of game engine, scripting or configuration malfunctions.\n","detail":null}},{"visibility":"public","name":"GeneralUi","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GeneralUi","params":"(WindowFramework*)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~GeneralUi","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetRocketRegion","params":"(void)","attrs":4,"return_type":"PointerTo< RocketRegion >","visibility":"public","return_attrs":0,"doc":null},{"name":"GetOptions","params":"(void)","attrs":0,"return_type":"GameOptions","visibility":"public","return_attrs":2,"doc":null}],"attributes":[{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_rocket","type":"PointerTo< RocketRegion >","attrs":0,"visibility":"private","doc":null},{"name":"_ih","type":"PointerTo< RocketInputHandler >","attrs":0,"visibility":"private","doc":null},{"name":"_console","type":"GameConsole","attrs":1,"visibility":"private","doc":null},{"name":"_options","type":"GameOptions","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Container for the parts of the interface that are present from beginning to exiting of the game.\n","detail":null}},{"visibility":"public","name":"MusicManager","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"MusicManager","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"~MusicManager","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"Initialize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Finalize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Get","params":"(void)","attrs":16,"return_type":"MusicManager","visibility":"public","return_attrs":1,"doc":null},{"name":"Play","params":"(const std::string& category)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Play","params":"(const std::string& category, const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayNext","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetVolume","params":"(float volume)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FadeOut","params":"(float elapsed_time)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"FadeVolume","params":"(float elapsed_time)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_global_ptr","type":"MusicManager","attrs":1,"visibility":"private","doc":null},{"name":"_data","type":"Data","attrs":0,"visibility":"private","doc":null},{"name":"_data_tree","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_current_category","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_timer","type":"Timer","attrs":0,"visibility":"private","doc":null},{"name":"_fading_out","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_volume_goal","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_volume_ref","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_current_music,","type":"sf::Music","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handle the playlists and provide an interface for playing music during the game.\n","detail":null}},{"visibility":"public","name":"ISampleInstance","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"~ISampleInstance","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Start","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Stop","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Pause","params":"(void)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetVolume","params":"(float)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetVolume","params":"(void)","attrs":68,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"IsPlaying","params":"(void)","attrs":68,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"AddReference","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DelReference","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetReferenceCount","params":"(void)","attrs":4,"return_type":"short","visibility":"public","return_attrs":8,"doc":null}],"attributes":[{"name":"ref_count","type":"short","attrs":8,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Interface for a sound sample. It is used as a mean to keep a sample alive as long as needed: if the reference counter is\nnull when the sound stops playing, it will be garbage collected. Reference counter can be modified using AddReference and\nDelReference.\n","detail":null}},{"visibility":"public","name":"ISample","decl":"struct","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ISample","params":"(SoundManager*)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~ISample","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"NewInstance","params":"(void)","attrs":64,"return_type":"ISampleInstance","visibility":"public","return_attrs":1,"doc":null},{"name":"LoadFromFile","params":"(const std::string& filename)","attrs":64,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetFilename","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null}],"attributes":[{"name":"filename","type":"std::string","attrs":0,"visibility":"protected","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"private","name":"SoundManager::Sound","decl":"struct","file":"include/level/level.hpp","namespaces":["SoundManager"],"constructors":[],"methods":[{"name":"Sound","params":"(const std::string& key, ISample* sample)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(const std::string& comp)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"key","type":"std::string","attrs":4,"visibility":"public","doc":null},{"name":"sample","type":"ISample","attrs":1,"visibility":"public","doc":null},{"name":"ref_count","type":"short","attrs":8,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"SoundManager","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"SoundManager","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~SoundManager","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"NewSoundManager","params":"(void)","attrs":16,"return_type":"SoundManager","visibility":"public","return_attrs":1,"doc":null},{"name":"Release","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CreateInstance","params":"(const std::string& key)","attrs":0,"return_type":"ISampleInstance","visibility":"public","return_attrs":1,"doc":null},{"name":"DeleteInstance","params":"(ISampleInstance*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GarbageCollect","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GarbageCollectAll","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetVolume","params":"(float)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetVolume","params":"(void)","attrs":4,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"Require","params":"(const std::string& key)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"RequireSound","params":"(const std::string& key)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_sound_managers","type":"SoundManagers","attrs":0,"visibility":"private","doc":null},{"name":"_sounds","type":"Sounds","attrs":0,"visibility":"private","doc":null},{"name":"_data_audio","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_sounds_required","type":"SoundsIterators","attrs":0,"visibility":"private","doc":null},{"name":"_volume","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_sounds_playing","type":"SoundInstances","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handles requests and garbage collecting for sound files (returned as [ISampleInstance]).\n","detail":null}},{"visibility":"public","name":"sf_SampleInstance","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"sf_SampleInstance","params":"(sf::SoundBuffer& buffer)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Start","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Stop","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Pause","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetVolume","params":"(float volume)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetVolume","params":"(void)","attrs":4,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"IsPlaying","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"instance","type":"sf::Sound","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"ISampleInstance"}],"doc":null},{"visibility":"public","name":"sf_Sample","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"sf_Sample","params":"(SoundManager* sm)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"NewInstance","params":"(void)","attrs":0,"return_type":"ISampleInstance","visibility":"public","return_attrs":1,"doc":null},{"name":"LoadFromFile","params":"(const std::string& filename)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"buffer","type":"sf::SoundBuffer","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"ISample"}],"doc":null},{"visibility":"private","name":"Level::HidingFloor","decl":"class","file":"include/level/level.hpp","namespaces":["Level"],"constructors":[],"methods":[{"name":"HidingFloor","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(NodePath np)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Done","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Alpha","params":"(void)","attrs":4,"return_type":"float","visibility":"public","return_attrs":0,"doc":null},{"name":"ForceAlpha","params":"(float _alpha)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetNodePath","params":"(NodePath np)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetFadingIn","params":"(bool set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"floor","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"fadingIn,","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"alpha","type":"float","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Level","decl":"class","file":"include/level/level.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Level","params":"(WindowFramework* window, GameUi& gameUi, Utils::Packet& data, TimeManager& tm)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"InitSun","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"InitPlayer","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetDataEngine","params":"(DataEngine* de)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPlayerInventory","params":"(Inventory*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SaveUpdateWorld","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Load","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"InsertParty","params":"(PlayerParty& party)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FetchParty","params":"(PlayerParty& party)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"StripParty","params":"(PlayerParty& party)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"~Level","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"do_task","params":"(void)","attrs":0,"return_type":"AsyncTask::DoneStatus","visibility":"public","return_attrs":0,"doc":null},{"name":"SetPersistent","params":"(bool set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsPersistent","params":"(void)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetState","params":"(State)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetState","params":"(void)","attrs":4,"return_type":"State","visibility":"public","return_attrs":0,"doc":null},{"name":"SetInterrupted","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DisplayCombatPath","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"DestroyCombatPath","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FindPath","params":"(std::list<Waypoint>&, Waypoint&, Waypoint&)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"GetWorld","params":"(void)","attrs":0,"return_type":"World","visibility":"public","return_attrs":1,"doc":null},{"name":"GetCamera","params":"(void)","attrs":0,"return_type":"SceneCamera","visibility":"public","return_attrs":2,"doc":null},{"name":"GetCharacter","params":"(const std::string& name)","attrs":0,"return_type":"ObjectCharacter","visibility":"public","return_attrs":1,"doc":null},{"name":"GetCharacter","params":"(const DynamicObject*)","attrs":0,"return_type":"ObjectCharacter","visibility":"public","return_attrs":1,"doc":null},{"name":"GetPlayer","params":"(void)","attrs":0,"return_type":"ObjectCharacter","visibility":"public","return_attrs":1,"doc":null},{"name":"UnprocessAllCollisions","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ProcessAllCollisions","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RefreshCharactersVisibility","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FindObjectFromNode","params":"(NodePath node)","attrs":0,"return_type":"InstanceDynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"GetObject","params":"(const std::string& name)","attrs":0,"return_type":"InstanceDynamicObject","visibility":"public","return_attrs":1,"doc":null},{"name":"GetTimeManager","params":"(void)","attrs":0,"return_type":"TimeManager","visibility":"public","return_attrs":2,"doc":null},{"name":"GetParticleManager","params":"(void)","attrs":0,"return_type":"ParticleSystemManager","visibility":"public","return_attrs":2,"doc":null},{"name":"GetChatterManager","params":"(void)","attrs":0,"return_type":"ChatterManager","visibility":"public","return_attrs":2,"doc":null},{"name":"GetDataEngine","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"GetItems","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"ConsoleWrite","params":"(const std::string& str)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RemoveObject","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackExitZone","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackGoToZone","params":"(const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackSelectNextZone","params":"(const std::vector<std::string>& zones)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackCancelSelectZone","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetNextZone","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"GetExitZone","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"SetEntryZone","params":"(Party&, const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEntryZone","params":"(ObjectCharacter*, const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MoveCharacterTo","params":"(ObjectCharacter*, Waypoint* wp)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"MoveCharacterTo","params":"(ObjectCharacter*, unsigned int wp_id)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionBarter","params":"(ObjectCharacter*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionUse","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionTalkTo","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionUseObjectOn","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionUseSkillOn","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionTargetUse","params":"(unsigned short it)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ActionUse","params":"(ObjectCharacter* user, InstanceDynamicObject* target)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ActionUseObject","params":"(ObjectCharacter* user, InventoryObject* object, unsigned char actionIt)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ActionUseObjectOn","params":"(ObjectCharacter* user, InstanceDynamicObject* target, InventoryObject* object, unsigned char actionIt)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ActionUseSkillOn","params":"(ObjectCharacter* user, InstanceDynamicObject* target, const std::string& skill)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ActionDropObject","params":"(ObjectCharacter* user, InventoryObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ActionUseWeaponOn","params":"(ObjectCharacter* user, ObjectCharacter* target, InventoryObject* object, unsigned char actionIt)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerDropObject","params":"(InventoryObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerUseObject","params":"(InventoryObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerLoot","params":"(Inventory*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerLootWithScript","params":"(Inventory*, InstanceDynamicObject*, asIScriptContext*, const std::string& script_path)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerEquipObject","params":"(unsigned short it, InventoryObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PlayerEquipObject","params":"(const std::string& target, unsigned int slot, InventoryObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"StartFight","params":"(ObjectCharacter* starter)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"StopFight","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"NextTurn","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UseActionPoints","params":"(unsigned short ap)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SetMouseState","params":"(MouseState)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MouseLeftClicked","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MouseRightClicked","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MouseWheelUp","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MouseWheelDown","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MouseSuccessRateHint","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"StartCombat","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetName","params":"(const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"SpawnEnemies","params":"(const std::string& type, unsigned short quantity, unsigned short n_spawn)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"IsWaypointOccupied","params":"(unsigned int id)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"PlaySound","params":"(const std::string& name)","attrs":0,"return_type":"ISampleInstance","visibility":"public","return_attrs":1,"doc":null},{"name":"SetupCamera","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RunDaylight","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RunMetabolism","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"MouseInit","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ToggleCharacterOutline","params":"(bool)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"InsertDynamicObject","params":"(DynamicObject&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"InsertCharacter","params":"(ObjectCharacter*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CloseRunningUi","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"IsInsideBuilding","params":"(unsigned char& floor)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"CheckCurrentFloor","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetCurrentFloor","params":"(unsigned char floor)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"FloorFade","params":"(bool in, NodePath floor)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"CurrentLevel","type":"Level","attrs":1,"visibility":"public","doc":null},{"name":"SignalShelfOpened","type":"Sync::Signal<void (Inventory&)>","attrs":0,"visibility":"public","doc":null},{"name":"_mouseState","type":"MouseState","attrs":0,"visibility":"public","doc":null},{"name":"obs","type":"Sync::ObserverHandler","attrs":0,"visibility":"public","doc":null},{"name":"obs_player","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null},{"name":"_level_name","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_graphicWindow","type":"GraphicsWindow","attrs":1,"visibility":"private","doc":null},{"name":"_mouse","type":"Mouse","attrs":0,"visibility":"private","doc":null},{"name":"_camera","type":"SceneCamera","attrs":0,"visibility":"private","doc":null},{"name":"_timer","type":"Timer","attrs":0,"visibility":"private","doc":null},{"name":"_timeManager","type":"TimeManager","attrs":2,"visibility":"private","doc":null},{"name":"_state","type":"State","attrs":0,"visibility":"private","doc":null},{"name":"_persistent","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_world","type":"World","attrs":1,"visibility":"private","doc":null},{"name":"_particle_manager","type":"ParticleSystemManager","attrs":0,"visibility":"private","doc":null},{"name":"_sound_manager","type":"SoundManager","attrs":0,"visibility":"private","doc":null},{"name":"_chatter_manager","type":"ChatterManager","attrs":0,"visibility":"private","doc":null},{"name":"_objects","type":"InstanceObjects","attrs":0,"visibility":"private","doc":null},{"name":"_characters","type":"Characters","attrs":0,"visibility":"private","doc":null},{"name":"_itCharacter","type":"Characters::iterator","attrs":0,"visibility":"private","doc":null},{"name":"_currentCharacter","type":"Characters::iterator","attrs":0,"visibility":"private","doc":null},{"name":"_player_halo","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_exitZones","type":"ExitZones","attrs":0,"visibility":"private","doc":null},{"name":"_exitingZone","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_exitingZoneTo,","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_sunLight","type":"PointerTo< DirectionalLight >","attrs":0,"visibility":"private","doc":null},{"name":"_sunLightNode","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_sunLightAmbient","type":"PointerTo< AmbientLight >","attrs":0,"visibility":"private","doc":null},{"name":"_sunLightAmbientNode","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_light_iterator","type":"World::WorldLights::iterator","attrs":0,"visibility":"private","doc":null},{"name":"_task_daylight","type":"TimeManager::Task","attrs":1,"visibility":"private","doc":null},{"name":"_task_metabolism","type":"TimeManager::Task","attrs":1,"visibility":"private","doc":null},{"name":"_levelUi","type":"LevelUi","attrs":0,"visibility":"private","doc":null},{"name":"_currentUis[UiTotalIt]","type":"UiBase","attrs":1,"visibility":"private","doc":null},{"name":"_currentRunningDialog","type":"DialogController","attrs":1,"visibility":"private","doc":null},{"name":"_currentUseObjectOn","type":"UiUseObjectOn","attrs":1,"visibility":"private","doc":null},{"name":"_currentUiLoot","type":"UiLoot","attrs":1,"visibility":"private","doc":null},{"name":"_mouseActionBlocked","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_dataEngine","type":"DataEngine","attrs":1,"visibility":"private","doc":null},{"name":"_items","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_combat_path","type":"std::list<Waypoint>","attrs":0,"visibility":"private","doc":null},{"name":"_last_combat_path","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_hidingFloors","type":"std::list<HidingFloor>","attrs":0,"visibility":"private","doc":null},{"name":"_currentFloor","type":"char","attrs":8,"visibility":"private","doc":null},{"name":"_floor_lastWp","type":"Waypoint","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"One of the three main parts of the game engine's core, it handles everything that happens when the player is\ninside a level.\n","detail":null}},{"visibility":"public","name":"MouseHovering","decl":"struct","file":"include/level/mouse.hpp","namespaces":[],"constructors":[],"methods":[{"name":"MouseHovering","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"MouseHovering"}},{"name":"Reset","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Reset","short":"Reset the data, as if no waypoints or objects are hovered"}},{"name":"SetWaypoint","params":"(NodePath np)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetWaypoint","short":"Forces the current hovered waypoint to be the one represented by the NodePath sent as parameter"}},{"name":"SetDynObject","params":"(NodePath np)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetDynObject","short":"Forces the current hovered dynamic object to be the one represented by the NodePath sent as parameter"}}],"attributes":[{"name":"hasWaypoint,","type":"bool","attrs":0,"visibility":"public","doc":{"name":"hasWaypoint","short":"Is set to true if a waypoint is currently being hovered"}},{"name":"waypoint","type":"NodePath","attrs":0,"visibility":"public","doc":{"name":"hasDynObject","short":"Is set to true if a dynamic object is currently being hovered"}},{"name":"waypoint_ptr","type":"Waypoint","attrs":1,"visibility":"public","doc":{"name":"waypoint","short":"NodePath of the hovered [Waypoint]. If hasWaypoint is false, the value is undefined"}},{"name":"dynObject","type":"NodePath","attrs":0,"visibility":"public","doc":{"name":"waypoint_ptr","short":"Hovered waypoint. If hasWaypoint is false, the value is undefined"}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Contained in the [Mouse] object, it provides information about the different types of objects currently hovered.\n","detail":null}},{"visibility":"public","name":"Mouse","decl":"class","file":"include/level/mouse.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Mouse","params":"(WindowFramework* window)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"Mouse"}},{"name":"~Mouse","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~Mouse"}},{"name":"Run","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Run","short":"Used in [Level::do_task] to update the data about hovering objects"}},{"name":"Hovering","params":"(void)","attrs":4,"return_type":"MouseHovering","visibility":"public","return_attrs":6,"doc":{"name":"Hovering","short":"Returns a reference to _hovering, providing data about currently hovered objects"}},{"name":"SetMouseState","params":"(char)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetMouseState","short":"Refreshes the texture of the mouse cursor","desc":"Depending on the parameter, the following textures will be loaded:\n<u>'a'</u>: textures/cursor-action.png\n<u>'i'</u>: textures/cursor-interaction.png\n<u>'t'</u>: textures/cursor-target.png\nAny other parameter will cause nothing to happen.\n"}},{"name":"ClosestWaypoint","params":"(World*, short currentFloor)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"ClosestWaypoint","short":"Seek the closest waypoint to the mouse cursor and store it in [MouseHovering]::_hovering","desc":"This is optimized through a divide&conquer algorithm. The amount of [Waypoint] in the current [Level] should have very little influence on the overhead"}},{"name":"CallbackButton1","params":"(const Event*, void* ptr)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackButton2","params":"(const Event*, void* ptr)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackButton3","params":"(const Event*, void* ptr)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackWheelUp","params":"(const Event*, void* ptr)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackWheelDown","params":"(const Event*, void* ptr)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"ButtonLeft","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"ButtonMiddle","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"ButtonRight","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"WheelUp","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"WheelDown","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_camera","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_lastMousePos","type":"LPoint2f","attrs":0,"visibility":"private","doc":null},{"name":"_mouseWatcher","type":"PointerTo< MouseWatcher >","attrs":0,"visibility":"private","doc":null},{"name":"_pickerRay","type":"PointerTo< CollisionRay >","attrs":0,"visibility":"private","doc":null},{"name":"_pickerNode","type":"PointerTo< CollisionNode >","attrs":0,"visibility":"private","doc":null},{"name":"_pickerPath","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_collisionTraverser","type":"CollisionTraverser","attrs":0,"visibility":"private","doc":null},{"name":"_collisionHandlerQueue","type":"PointerTo< CollisionHandlerQueue >","attrs":0,"visibility":"private","doc":null},{"name":"_hovering","type":"MouseHovering","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handle mouse-driven events and provide hovering data during the execution of a [Level]. See [MouseCursor] for cursor and hints management.\n","detail":null}},{"visibility":"public","name":"DialogAnswers","decl":"struct","file":"include/level/dialog.hpp","namespaces":[],"constructors":[],"methods":[],"attributes":[{"name":"answers","type":"AnswerList","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"List of answers that a player can pick in a dialog node. Provided by [DialogModel], used in [DialogController].\n","detail":null}},{"visibility":"public","name":"DialogModel","decl":"class","file":"include/level/dialog.hpp","namespaces":[],"constructors":[],"methods":[{"name":"DialogModel","params":"(const std::string& dialogId, Data l18n)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"DialogModel"}},{"name":"~DialogModel","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~DialogModel"}},{"name":"SetCurrentNpcLine","params":"(const std::string& id)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetCurrentNpcLine","short":"Sets the current node for the dialog","desc":"The model needse to be informed of the current node in order to provide the answers available to the player"}},{"name":"GetHookAvailable","params":"(const std::string& answerId)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":{"name":"GetHookAvailable"}},{"name":"GetExecuteMethod","params":"(const std::string& answerId)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":{"name":"GetExecuteMethod"}},{"name":"GetDefaultNextLine","params":"(const std::string& answerId)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":{"name":"GetDefaultNextLine"}},{"name":"GetNpcLine","params":"(void)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":{"name":"GetNpcLine"}},{"name":"GetDialogAnswers","params":"(void)","attrs":0,"return_type":"DialogAnswers","visibility":"public","return_attrs":0,"doc":{"name":"GetDialogAnswers","short":"Returns the answers available to the player given the current node"}}],"attributes":[{"name":"_tree","type":"DataTree","attrs":1,"visibility":"private","doc":{"name":"_tree","short":"DataTree provided by the JSON description of the dialog"}},{"name":"_data","type":"Data","attrs":0,"visibility":"private","doc":{"name":"_data","short":"[Data] object wrapping the _tree attribute"}},{"name":"_l18n","type":"Data","attrs":0,"visibility":"private","doc":{"name":"_l18n","short":"Internationalization data, allowing traduction of the dialogs"}},{"name":"_currentNpcLine","type":"std::string","attrs":0,"visibility":"private","doc":{"name":"_currentNpcLine"}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Provides an interface to handle the data from a dialog's JSON description.\n","detail":null}},{"visibility":"public","name":"DialogView","decl":"class","file":"include/level/dialog.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Destroy","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Destroy"}},{"name":"DialogView","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"protected","return_attrs":0,"doc":{"name":"UpdateView","short":"Must be used by the DialogController to notify that the NPC line and player answers must be updated"}},{"name":"~DialogView","params":"()","attrs":64,"return_type":null,"visibility":"protected","return_attrs":0,"doc":{"name":"CleanView","short":"Clean up the RocketListener from the current answers"}},{"name":"UpdateView","params":"(const std::string& npcLine, const DialogAnswers& answers)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null},{"name":"CleanView","params":"(const DialogAnswers& answers)","attrs":0,"return_type":"void","visibility":"protected","return_attrs":0,"doc":null}],"attributes":[{"name":"AnswerSelected","type":"RocketListener","attrs":0,"visibility":"protected","doc":null},{"name":"BarterOpened","type":"RocketListener","attrs":0,"visibility":"protected","doc":null},{"name":"_containerNpcLine","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_containerAnswers","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"Handles the libRocket interface used for dialogs and barter\n","detail":null}},{"visibility":"public","name":"DialogController","decl":"class","file":"include/level/dialog.hpp","namespaces":[],"constructors":[],"methods":[{"name":"DialogController","params":"(WindowFramework* window, Rocket::Core::Context* context, ObjectCharacter* character, Data i18n)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"DialogController"}},{"name":"~DialogController","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~DialogController"}},{"name":"WithCharacter","params":"(void)","attrs":4,"return_type":"ObjectCharacter","visibility":"public","return_attrs":1,"doc":{"name":"WithCharacter","short":"Returns the [ObjectCharacter] object of the NPC with which the dialog is taking place"}},{"name":"ExecuteAnswer","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"ExecuteAnswer","short":"Callback executed when the player has picked an answer"}},{"name":"SetCurrentNode","params":"(const std::string& nodeName)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"SetCurrentNode","short":"Forces the dialog to the specified node.","desc":"A 'node' defines the NPC's current line and the possible answers for the player. This method is used to go from one node to another in response to the answer the player given and the reaction it triggered for the NPC"}},{"name":"OpenBarter","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"OpenBarter","short":"Slot for the signal opening the barter dialog","desc":"Pauses the dialog and open the barter interface."}}],"attributes":[{"name":"DialogEnded","type":"Sync::Signal<void ()>","attrs":0,"visibility":"public","doc":{"name":"DialogEnded","short":"Signal emitted when the dialog has ended","desc":"The dialog may be ended by the script or the interface. This signal will be emitted regardless."}},{"name":"StartBarter","type":"Sync::Signal<void (ObjectCharacter*)>","attrs":0,"visibility":"public","doc":{"name":"StartBarter","short":"Signal emitted when the DialogController is asking for a barter interface to open","desc":"The [ObjectCharacter] parameter is a pointer to the NPC with which the player will barter"}},{"name":"_script","type":"AngelScript::Object","attrs":0,"visibility":"private","doc":{"name":"_script","short":"Handle to the script controlling te current dialog"}},{"name":"_model","type":"DialogModel","attrs":0,"visibility":"private","doc":{"name":"_model","short":"Contains and provide informations from the JSON file describing the dialog"}},{"name":"_character","type":"ObjectCharacter","attrs":1,"visibility":"private","doc":{"name":"_character","short":"Pointer to the NPC with which the dialog is happening"}}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"DialogView"}],"doc":{"overview":"Controller for the MVC Design Pattern in charge of dialogs between a player and an NPC.\n","detail":null}},{"visibility":"public","name":"ObjectShelf","decl":"class","file":"include/level/objects/shelf.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ObjectShelf","params":"(Level* level, DynamicObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~ObjectShelf","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"LockWaypoints","params":"(bool)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetGoToData","params":"(InstanceDynamicObject*)","attrs":0,"return_type":"GoToData","visibility":"public","return_attrs":0,"doc":null},{"name":"GetInventory","params":"(void)","attrs":0,"return_type":"Inventory","visibility":"public","return_attrs":2,"doc":null},{"name":"CallbackActionUse","params":"(InstanceDynamicObject*)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_inventory","type":"Inventory","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InstanceDynamicObject"}],"doc":null},{"visibility":"public","name":"ObjectLocker","decl":"class","file":"include/level/objects/locker.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ObjectLocker","params":"(Level* level, DynamicObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~ObjectLocker","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionUse","params":"(InstanceDynamicObject*)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetKeyName","params":"()","attrs":4,"return_type":"string","visibility":"public","return_attrs":0,"doc":null},{"name":"FuckYouMSVC","params":"(InstanceDynamicObject*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"ObjectShelf"},{"visibility":"public","type":"Lockable"}],"doc":null},{"visibility":"public","name":"ObjectStair","decl":"class","file":"include/level/objects/stair.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ObjectStair","params":"(Level* level, DynamicObject* object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~ObjectStair","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"","type":"","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InstanceDynamicObject"},{"visibility":"public","type":"Waypoint::ArcObserver"}],"doc":null},{"visibility":"public","name":"ObjectItem","decl":"class","file":"include/level/objects/dropped_object.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ObjectItem","params":"(Level* level, DynamicObject* object, InventoryObject* item)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"CallbackActionUse","params":"(InstanceDynamicObject* object)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ProcessCollisions","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_item","type":"InventoryObject","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"InstanceDynamicObject"}],"doc":null},{"visibility":"private","name":"ChatterManager::Text","decl":"struct","file":"include/level/chatter_manager.hpp","namespaces":["ChatterManager"],"constructors":[],"methods":[],"attributes":[{"name":"parent","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"text_node","type":"NodePath","attrs":0,"visibility":"public","doc":null},{"name":"timeout","type":"float","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"ChatterManager","decl":"class","file":"include/level/chatter_manager.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ChatterManager","params":"(WindowFramework* window)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"ChatterManager"}},{"name":"PushTextBox","params":"(InstanceDynamicObject* object, const std::string& text, unsigned short r, unsigned short g, unsigned short b, float timeout = 5.f)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"PushTextBox","short":"Creates a new text box which will be displayed above an [InstanceDynamicObject]"}},{"name":"Run","params":"(float elapsed_time, NodePath camera)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Run","short":"Used by the level class to perform periodic tasks over the chatter boxes (updating the opacity, collecting the expired ones)","desc":"This method should only be run once and only by the [Level] class in the do_task method."}},{"name":"SetTextOffset","params":"(NodePath parent, NodePath node)","attrs":16,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"SetTextOffset","short":"Set the offset of a text NodePath above the parent NodePath"}}],"attributes":[{"name":"window","type":"WindowFramework","attrs":1,"visibility":"private","doc":{"name":"window"}},{"name":"font","type":"PointerTo< TextFont >","attrs":0,"visibility":"private","doc":{"name":"text_boxes","short":"List of chatter boxes currently displayed on the screen."}},{"name":"text_boxes","type":"TextBoxes","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handles the on-screen chatboxes for real-time dialogs (boxes over the characters heads). The ChatterManager must have a single instance, which can be retrieved through an accessor of the Level class.\n","detail":null}},{"visibility":"public","name":"SceneCamera","decl":"class","file":"include/level/scene_camera.hpp","namespaces":[],"constructors":[],"methods":[{"name":"SceneCamera","params":"(WindowFramework* window, NodePath camera)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetEnabledScroll","params":"(bool set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SwapCameraView","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetLimits","params":"(unsigned int minX, unsigned int minY, unsigned int maxX, unsigned maxY)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RefreshCameraHeight","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SlideToHeight","params":"(float)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CenterCameraInstant","params":"(LPoint3f)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CenterCameraOn","params":"(NodePath np)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FollowNodePath","params":"(NodePath np)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"StopFollowingNodePath","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CenterOnObject","params":"(InstanceDynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"FollowObject","params":"(InstanceDynamicObject*)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetNodePath","params":"(void)","attrs":4,"return_type":"NodePath","visibility":"public","return_attrs":0,"doc":null},{"name":"RunScroll","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RunFollow","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"RunSlideHeight","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_graphicWindow","type":"GraphicsWindow","attrs":1,"visibility":"private","doc":null},{"name":"_camera","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_cameraPos","type":"LPoint3f","attrs":0,"visibility":"private","doc":null},{"name":"_cameraMovementSpeed","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_scrollEnabled","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_currentCameraAngle","type":"char","attrs":8,"visibility":"private","doc":null},{"name":"_currentHpr","type":"LPoint3f","attrs":0,"visibility":"private","doc":null},{"name":"_objectiveHpr","type":"LPoint3f","attrs":0,"visibility":"private","doc":null},{"name":"_minPosX,","type":"int","attrs":0,"visibility":"private","doc":null},{"name":"_destHeight","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_camera_height","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_centeringCamera","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_followingNodePath","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_toFollow","type":"NodePath","attrs":0,"visibility":"private","doc":null},{"name":"_currentPos","type":"LPoint3f","attrs":0,"visibility":"private","doc":null},{"name":"_objectivePos","type":"LPoint3f","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"SkillTarget","decl":"class","file":"include/level/skill_target.hpp","namespaces":[],"constructors":[],"methods":[{"name":"SkillTarget","params":"(InstanceDynamicObject* self)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Initialize","params":"(const std::string& module_name, const std::string& filepath, asIScriptContext* context)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"UseSkill","params":"(ObjectCharacter* user, std::string skill)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"self","type":"InstanceDynamicObject","attrs":1,"visibility":"private","doc":null},{"name":"hook_use_skill","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Scriptable"}],"doc":null},{"visibility":"public","name":"InteractMenu","decl":"class","file":"include/level/interact_menu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"InteractMenu","params":"(WindowFramework* window, Rocket::Core::Context* context, InstanceDynamicObject& object)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~InteractMenu","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"ButtonClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ButtonHovered","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"MouseButton","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ExecuteForButtonId","params":"(Rocket::Core::Event& event, std::function<bool (Rocket::Core::Event&, const std::string&, InstanceDynamicObject::Interaction*)> callback)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_buttons","type":"Buttons","attrs":0,"visibility":"private","doc":null},{"name":"_listeners","type":"Listeners","attrs":0,"visibility":"private","doc":null},{"name":"_buttonListener","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_buttonHover,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_obs","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null},{"name":"_done","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":null},{"visibility":"public","name":"WorldDiplomacy::Faction","decl":"struct","file":"include/level/diplomacy.hpp","namespaces":["WorldDiplomacy"],"constructors":[],"methods":[{"name":"operator==","params":"(const std::string& name)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"operator==","params":"(unsigned int flag)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"name","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"flag","type":"int","attrs":8,"visibility":"public","doc":null},{"name":"enemyMask","type":"int","attrs":8,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Represents a game faction for the diplomacy system.\n","detail":null}},{"visibility":"public","name":"WorldDiplomacy","decl":"class","file":"include/level/diplomacy.hpp","namespaces":[],"constructors":[],"methods":[{"name":"WorldDiplomacy","params":"(DataEngine&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~WorldDiplomacy","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"AddFaction","params":"(const std::string& name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetFaction","params":"(const std::string& name)","attrs":0,"return_type":"Faction","visibility":"public","return_attrs":1,"doc":null},{"name":"GetFaction","params":"(unsigned int flag)","attrs":0,"return_type":"Faction","visibility":"public","return_attrs":1,"doc":null},{"name":"SetAsEnemy","params":"(bool set, const std::string& name1, const std::string& name2)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetAsEnemy","params":"(bool set, unsigned int flag1, unsigned int flag2)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Initialize","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetAsEnemy","params":"(bool set, Faction& first, Faction& second)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_data_engine","type":"DataEngine","attrs":2,"visibility":"private","doc":null},{"name":"_factions","type":"Factions","attrs":0,"visibility":"private","doc":null},{"name":"_next_flag","type":"int","attrs":8,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Extension of the DataEngine providing logical tools to handle faction data. It is used to determine wether two characters\nare enemies or allies based on their factions. It can also be used to add new factions during the game.\n","detail":null}},{"visibility":"private","name":"WorldMap::City","decl":"struct","file":"include/worldmap/worldmap.hpp","namespaces":["WorldMap"],"constructors":[],"methods":[{"name":"operator==","params":"(const std::string& str)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"pos_x","type":"int","attrs":0,"visibility":"public","doc":null},{"name":"pos_y","type":"int","attrs":0,"visibility":"public","doc":null},{"name":"radius","type":"int","attrs":0,"visibility":"public","doc":null},{"name":"name","type":"std::string","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Represents a city in the [WorldMap] object.\n","detail":null}},{"visibility":"public","name":"WorldMap","decl":"class","file":"include/worldmap/worldmap.hpp","namespaces":[],"constructors":[],"methods":[{"name":"WorldMap","params":"(WindowFramework*, GameUi*, DataEngine&, TimeManager&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~WorldMap","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Show","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetCityVisible","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddCity","params":"(const std::string&, float pos_x, float pos_y, float radius)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"HasCity","params":"(const std::string&)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"MapClicked","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PartyClicked","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CityClicked","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetInterrupted","params":"(bool set)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MoveTowardsCoordinates","params":"(float x, float y)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MoveTowardsPlace","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetDataEngine","params":"(void)","attrs":0,"return_type":"DataEngine","visibility":"public","return_attrs":2,"doc":null},{"name":"GetCaseData","params":"(int x, int y)","attrs":4,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"GetCurrentPosition","params":"(float& x, float& y)","attrs":4,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"MapTileGenerator","params":"(Data map)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdatePartyCursor","params":"(float elapsedTime)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"UpdateClock","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"IsPartyInCity","params":"(std::string& ret)","attrs":4,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"GetCaseAt","params":"(int x, int y)","attrs":4,"return_type":"Rocket::Core::Element","visibility":"private","return_attrs":1,"doc":null},{"name":"GetCurrentCase","params":"(int&, int&)","attrs":4,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetCaseVisibility","params":"(int x, int y, char visibility)","attrs":4,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"AddCityToList","params":"(Data)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SaveMapStatus","params":"(void)","attrs":4,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"CheckRandomEncounter","params":"(void)","attrs":4,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"CurrentWorldMap","type":"WorldMap","attrs":1,"visibility":"public","doc":null},{"name":"GoToPlace","type":"Sync::Signal<void (std::string)>","attrs":0,"visibility":"public","doc":null},{"name":"RequestRandomEncounterCheck","type":"Sync::Signal<void (int, int)>","attrs":0,"visibility":"public","doc":null},{"name":"MapClickedEvent,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_mapTree","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_dataEngine","type":"DataEngine","attrs":2,"visibility":"private","doc":null},{"name":"_timeManager","type":"TimeManager","attrs":2,"visibility":"private","doc":null},{"name":"_gameUi","type":"GameUi","attrs":2,"visibility":"private","doc":null},{"name":"_timer","type":"Timer","attrs":0,"visibility":"private","doc":null},{"name":"_interrupted","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_size_x,","type":"int","attrs":0,"visibility":"private","doc":null},{"name":"_tsize_x,","type":"int","attrs":0,"visibility":"private","doc":null},{"name":"_current_pos_x,","type":"float","attrs":0,"visibility":"private","doc":null},{"name":"_goal_x,","type":"int","attrs":0,"visibility":"private","doc":null},{"name":"_cursor","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_cities","type":"Cities","attrs":0,"visibility":"private","doc":null},{"name":"_cases","type":"Cases","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"One of the three main parts of the game engine's core, it handles everything that happens when the player is\nexploring the world map.\n","detail":null}},{"visibility":"public","name":"Filesystem","decl":"class","file":"include/directory.hpp","namespaces":[],"constructors":[],"methods":[{"name":"FileContent","params":"(const std::string& filepath, std::string& out)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"FileCopy","params":"(const std::string& from, const std::string& dest)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Filesystem","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Abstraction for file management.\n","detail":null}},{"visibility":"public","name":"Directory","decl":"class","file":"include/directory.hpp","namespaces":[],"constructors":[],"methods":[{"name":"MakeDir","params":"(const std::string& str)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"RemoveDir","params":"(const std::string& str)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"OpenDir","params":"(const std::string& str)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Path","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"GetEntries","params":"(void)","attrs":0,"return_type":"Entries","visibility":"public","return_attrs":2,"doc":null},{"name":"GetEntries","params":"(void)","attrs":4,"return_type":"Entries","visibility":"public","return_attrs":6,"doc":null}],"attributes":[{"name":"_dirEntries","type":"Entries","attrs":0,"visibility":"private","doc":{"name":"_dirEntries","short":"List of entries for the current opened directory"}},{"name":"_dirName","type":"std::string","attrs":0,"visibility":"private","doc":{"name":"_dirName","short":"Name of the currently opened directory"}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Abstraction for directory management.\n","detail":null}},{"visibility":"public","name":"UiLoad","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiLoad","params":"(WindowFramework* window, Rocket::Core::Context* context, const std::string& savePath)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiLoad","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"LoadSlotRml","params":"(const std::string& prefix, unsigned short slot)","attrs":16,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadSlots","params":"(const std::string& savepath)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"LoadGame","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ClickSlot","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Cancel","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Erase","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"LoadSlot,","type":"Sync::Signal<void (unsigned char)>","attrs":0,"visibility":"public","doc":null},{"name":"EventLoadGame,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_selectedSlot","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_savePath","type":"std::string","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"Interface for loading the game.\n","detail":null}},{"visibility":"public","name":"UiSave","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiSave","params":"(WindowFramework* window, Rocket::Core::Context* context, const std::string& savePath)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiSave","params":"()","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"LoadSlots","params":"(const std::string& savepath)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SaveGame","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ClickSlot","params":"(Rocket::Core::Event& event)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Cancel","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Erase","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"SaveToSlot,","type":"Sync::Signal<bool (unsigned char)>","attrs":0,"visibility":"public","doc":null},{"name":"EventSaveGame,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_selectedSlot","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_savePath","type":"std::string","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"Interface for saving the game.\n","detail":null}},{"visibility":"public","name":"Pipbuck::App","decl":"struct","file":"include/mainmenu.hpp","namespaces":["Pipbuck"],"constructors":[],"methods":[{"name":"~App","params":"(void)","attrs":64,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetAppId","params":"(void)","attrs":68,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"RunAsMainTask","params":"(Rocket::Core::Element*, DataEngine&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RunAsBackgroundTask","params":"(DataEngine&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Started","params":"(DataEngine&)","attrs":64,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Exited","params":"(DataEngine&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unfocused","params":"(DataEngine&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Focused","params":"(Rocket::Core::Element*, DataEngine&)","attrs":64,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"Exit","type":"Sync::Signal<void (App*)>","attrs":0,"visibility":"public","doc":null},{"name":"Unfocus","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"AskFocus","type":"Sync::Signal<void (App*)>","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Interface representing a running application from the [Pipbuck].\n","detail":null}},{"visibility":"public","name":"Pipbuck","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Pipbuck","params":"(WindowFramework*, Rocket::Core::Context*, DataEngine&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Pipbuck","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Restart","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Run","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ReloadApps","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StartApp","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"QuitApp","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GoHome","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"DoQuitApp","params":"(App*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"AppAskedFocus","params":"(App*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"AppAskedUnfocus","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"AppAskedExit","params":"(App*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_data_engine","type":"DataEngine","attrs":2,"visibility":"private","doc":null},{"name":"_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":null},{"name":"_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":null},{"name":"_running_apps","type":"AppList","attrs":0,"visibility":"private","doc":null},{"name":"_running_app","type":"App","attrs":1,"visibility":"private","doc":null},{"name":"_asked_unfocus","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_asked_focus","type":"AppList","attrs":0,"visibility":"private","doc":null},{"name":"_asked_exit","type":"AppList","attrs":0,"visibility":"private","doc":null},{"name":"EventStartApp,","type":"RocketListener","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"Main controller for the pipbuck. It handles the execution and contexts of [Pipbuck::App]s.\n","detail":null}},{"visibility":"public","name":"PipbuckAppScript","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"PipbuckAppScript","params":"(Data script)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~PipbuckAppScript","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetAppId","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"RunAsMainTask","params":"(Rocket::Core::Element*, DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RunAsBackgroundTask","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Started","params":"(DataEngine&)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Exited","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unfocused","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Focused","params":"(Rocket::Core::Element*, DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":null},{"name":"_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":null},{"name":"_data","type":"Data","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Pipbuck::App"}],"doc":{"overview":"Controls a [Pipbcuk::App] running from a script file.\n","detail":null}},{"visibility":"public","name":"PipbuckClockApp","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"PipbuckClockApp","params":"(Data script)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~PipbuckClockApp","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetAppId","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"RunAsMainTask","params":"(Rocket::Core::Element*, DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RunAsBackgroundTask","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Started","params":"(DataEngine&)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Exited","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unfocused","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Focused","params":"(Rocket::Core::Element*, DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"WaitChange","params":"(int chance)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Wait","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SelectTimeUnit","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetValue","params":"(Rocket::Core::Element* element, unsigned short value)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_appid","type":"std::string","attrs":4,"visibility":"private","doc":null},{"name":"_time_manager","type":"TimeManager","attrs":2,"visibility":"private","doc":null},{"name":"_inner_rml","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"EventWaitMore,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_year,","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_wait_days,","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_selected_wait","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_wait_more,","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_span_error","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_minutes_to_spend","type":"int","attrs":8,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Pipbuck::App"}],"doc":null},{"visibility":"public","name":"PipbuckQuestApp","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"PipbuckQuestApp","params":"(Data script)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~PipbuckQuestApp","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetAppId","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":4,"doc":null},{"name":"RunAsMainTask","params":"(Rocket::Core::Element*, DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"RunAsBackgroundTask","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Started","params":"(DataEngine&)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"Exited","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Unfocused","params":"(DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Focused","params":"(Rocket::Core::Element*, DataEngine&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadQuestList","params":"(Rocket::Core::Element*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"LoadQuestView","params":"(Rocket::Core::Element*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ListQuestHovered","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ListQuestClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"EventQuestHovered,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_appid","type":"std::string","attrs":4,"visibility":"private","doc":null},{"name":"_rml_index,","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_data_engine","type":"DataEngine","attrs":1,"visibility":"private","doc":null},{"name":"_current_view","type":"Interfaces","attrs":0,"visibility":"private","doc":null},{"name":"_current_quest","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_last_hovered","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_root","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_observer","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"Pipbuck::App"}],"doc":null},{"visibility":"public","name":"Buff","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Buff","params":"(const std::string& name, StatController* stats, Data data, TimeManager& tm)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Buff","params":"(Utils::Packet& packet,   TimeManager& tm, std::function<StatController* (const std::string&)>)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~Buff","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"GetTargetName","params":"(void)","attrs":4,"return_type":"std::string","visibility":"public","return_attrs":6,"doc":null},{"name":"GetStatistics","params":"(void)","attrs":4,"return_type":"StatController","visibility":"public","return_attrs":1,"doc":null},{"name":"SetStatistics","params":"(StatController* v)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Refresh","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"InitScripts","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"Over","type":"Sync::Signal<void (Buff*)>","attrs":0,"visibility":"public","doc":null},{"name":"_context","type":"asIScriptContext","attrs":1,"visibility":"private","doc":null},{"name":"_module","type":"asIScriptModule","attrs":1,"visibility":"private","doc":null},{"name":"_refresh","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null},{"name":"_buff","type":"Data","attrs":0,"visibility":"private","doc":null},{"name":"_target_name","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_target_stats","type":"StatController","attrs":1,"visibility":"private","doc":null},{"name":"_tm","type":"TimeManager","attrs":2,"visibility":"private","doc":null},{"name":"_task","type":"TimeManager::Task","attrs":1,"visibility":"private","doc":null},{"name":"_looping","type":"bool","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"This class controls the effects of buffs that are placed on a character.\n","detail":null}},{"visibility":"public","name":"BuffManager","decl":"struct","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"BuffManager","params":"(TimeManager& tm)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~BuffManager","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Save","params":"(Utils::Packet&, std::function<bool            (const std::string&)>)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Load","params":"(Utils::Packet&, std::function<StatController* (const std::string&)>)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CollectGarbage","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Cleanup","params":"(Buff*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"buffs","type":"Buffs","attrs":0,"visibility":"public","doc":null},{"name":"tm","type":"TimeManager","attrs":2,"visibility":"public","doc":null},{"name":"garbage","type":"Buffs","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Class responsible for loading, saving, and schedule [Buff]s.\n","detail":null}},{"visibility":"private","name":"GameTask::LoadLevelParams","decl":"struct","file":"include/mainmenu.hpp","namespaces":["GameTask"],"constructors":[],"methods":[{"name":"LoadLevelParams","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"name","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"path","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"isSaveFile","type":"bool","attrs":0,"visibility":"public","doc":null},{"name":"entry_zone","type":"std::string","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"GameTask","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"GameTask","params":"(WindowFramework* window, GeneralUi&)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"GameTask"}},{"name":"~GameTask","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~GameTask"}},{"name":"MapOpenLevel","params":"(std::string name)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"MapOpenLevel"}},{"name":"SetLevel","params":"(Level* level)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetLevel"}},{"name":"do_task","params":"()","attrs":0,"return_type":"AsyncTask::DoneStatus","visibility":"public","return_attrs":0,"doc":{"name":"do_task","short":"Implementation of AsyncTask from Panda3D"}},{"name":"SaveGame","params":"(const std::string& savepath)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"SaveGame","short":"Saves the current state of the game in the path passed as parameter"}},{"name":"LoadGame","params":"(const std::string& savepath)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"LoadGame","short":"Loads a game from the path passed as parameter"}},{"name":"OpenLevel","params":"(const std::string& savepath, const std::string& level, const std::string& entry_zone = \"\")","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"ExitLevel","params":"(const std::string& savepath)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CopySave","params":"(const std::string& savepath, const std::string& slotPath)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null},{"name":"SaveToSlot","params":"(unsigned char slot)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadSlot","params":"(unsigned char slot)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadLastState","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Exit","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetLevelSpecialEncounter","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetLevelEncounter","params":"(const std::string& type, short n_creeps)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PushBuff","params":"(ObjectCharacter* character, Data buff)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PushBuff","params":"(const std::string& name,    Data buff)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SaveLevelBuffs","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SavePartyBuffs","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadLevelBuffs","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"LoadPartyBuffs","params":"(Utils::Packet&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetTimeManager","params":"(void)","attrs":0,"return_type":"TimeManager","visibility":"public","return_attrs":2,"doc":null},{"name":"GetDiplomacy","params":"(void)","attrs":0,"return_type":"WorldDiplomacy","visibility":"public","return_attrs":2,"doc":null},{"name":"GetQuestManager","params":"(void)","attrs":0,"return_type":"QuestManager","visibility":"public","return_attrs":2,"doc":null},{"name":"GetPlayerParty","params":"(void)","attrs":0,"return_type":"Party","visibility":"public","return_attrs":1,"doc":null},{"name":"PlaySound","params":"(const std::string&)","attrs":0,"return_type":"ISampleInstance","visibility":"public","return_attrs":1,"doc":null},{"name":"FinishLoad","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"LoadClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SaveClicked","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SaveLevel","params":"(Level* level, const std::string& name)","attrs":16,"return_type":"bool","visibility":"private","return_attrs":0,"doc":null},{"name":"LoadLevel","params":"(WindowFramework* window, GameUi& gameUi, const std::string& path, const std::string& name, const std::string& entry_zone = \"\", bool isSaveFile = false)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"DoLoadLevel","params":"(LoadLevelParams)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GameOver","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"DoCheckRandomEncounter","params":"(int x, int y)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"SetPlayerInventory","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"EraseSlot","params":"(unsigned char slot)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"CurrentGameTask","type":"GameTask","attrs":1,"visibility":"public","doc":{"name":"CurrentGameTask","short":"Static accessor to the current running GameTask. Null if none exists","desc":"Among other things, it is what the \"game\" global variable points to in the scripting context."}},{"name":"_is_level_buff","type":"std::function<bool (const std::string&)>","attrs":0,"visibility":"public","doc":{"name":"_is_level_buff","short":"Temporary store for lambdas used in the [BuffManager]"}},{"name":"_signals","type":"Sync::Signals","attrs":0,"visibility":"private","doc":{"name":"_signals","short":"Handle for registered observers"}},{"name":"_continue","type":"bool","attrs":0,"visibility":"private","doc":{"name":"_continue","short":"The game will stop at its next iteration if this variable is set to false"}},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":{"name":"_window","short":"Panda3D's WindowFramework instance"}},{"name":"_sound_manager","type":"SoundManager","attrs":0,"visibility":"private","doc":{"name":"SoundManager"}},{"name":"_gameUi","type":"GameUi","attrs":0,"visibility":"private","doc":{"name":"GameUi"}},{"name":"_dataEngine","type":"DataEngine","attrs":0,"visibility":"private","doc":{"name":"DataEngine"}},{"name":"_timeManager","type":"TimeManager","attrs":0,"visibility":"private","doc":{"name":"TimeManager"}},{"name":"_buff_manager","type":"BuffManager","attrs":0,"visibility":"private","doc":{"name":"BuffManager"}},{"name":"_pipbuck","type":"Pipbuck","attrs":0,"visibility":"private","doc":{"name":"Pipbuck"}},{"name":"_charSheet","type":"DataTree","attrs":1,"visibility":"private","doc":{"name":"_charSheet","short":"Pointer to the statistic sheet configuration file from the current player."}},{"name":"_playerParty","type":"PlayerParty","attrs":1,"visibility":"private","doc":{"name":"_playerParty"}},{"name":"_playerStats","type":"StatController","attrs":1,"visibility":"private","doc":{"name":"_playerStats"}},{"name":"_playerInventory","type":"Inventory","attrs":1,"visibility":"private","doc":{"name":"_playerInventory"}},{"name":"_quest_manager","type":"QuestManager","attrs":1,"visibility":"private","doc":{"name":"_quest_manager"}},{"name":"_worldMap","type":"WorldMap","attrs":1,"visibility":"private","doc":{"name":"_worldMap"}},{"name":"_levelName","type":"std::string","attrs":0,"visibility":"private","doc":{"name":"_levelName"}},{"name":"_level","type":"Level","attrs":1,"visibility":"private","doc":{"name":"_level"}},{"name":"_savePath","type":"std::string","attrs":0,"visibility":"private","doc":{"name":"_savePath","short":"Stores the savepath value from [[OptionsManager]]."}},{"name":"_uiSaveGame","type":"UiSave","attrs":1,"visibility":"private","doc":{"name":"_uiSaveGame"}},{"name":"_uiLoadGame","type":"UiLoad","attrs":1,"visibility":"private","doc":{"name":"_uiLoadGame"}},{"name":"SyncLoadLevel","type":"Sync::Signal<void (LoadLevelParams)>","attrs":0,"visibility":"private","doc":{"name":"SyncLoadLevel","short":"An asynchronous signal used to react to LoadLevel events after the current main loop turn ends"}},{"name":"obs_level_unpersistent","type":"Sync::ObserverId","attrs":0,"visibility":"private","doc":{"name":"obs_level_unpersistent","short":"Used in special encounters to handle the observers spawning creeps after the unpersistent level has been loaded."}}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"The task class that handles the proper execution of an in-progress game.","detail":null}},{"visibility":"public","name":"MouseCursor","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"MouseCursor","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"MouseCursor"}},{"name":"~MouseCursor","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"~MouseCursor"}},{"name":"SetCursorTexture","params":"(const std::string& texture)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetCursorTexture"}},{"name":"SetHint","params":"(const std::string& rml)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetHint","short":"Set the hint element to the specified RML"}},{"name":"SetHint","params":"(int)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"SetHint","short":"Set the hint to a percentage (for success chances)"}},{"name":"Update","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Update","short":"Updates the texture and hint position accordingly to the cursor position","desc":"This procedure is executed in the [MainMenu] handler to ensure it is executed once per turn of the main loop"}},{"name":"PullToFront","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"PullToFront","short":"Ensures that the mouse cursor is always on top of everything"}},{"name":"Get","params":"(void)","attrs":16,"return_type":"MouseCursor","visibility":"public","return_attrs":1,"doc":{"name":"Get","short":"Accessor for the singleton instance"}}],"attributes":[{"name":"_cursor","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_hint","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_current_hint","type":"std::string","attrs":0,"visibility":"private","doc":null},{"name":"_static","type":"MouseCursor","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"Singleton handling the mouse cursor and the mouse hints.\n","detail":null}},{"visibility":"public","name":"OptionsManager","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"OptionsManager","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"~OptionsManager","params":"()","attrs":0,"return_type":null,"visibility":"private","return_attrs":0,"doc":null},{"name":"Initialize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Finalize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Get","params":"(void)","attrs":16,"return_type":"Data","visibility":"public","return_attrs":0,"doc":null},{"name":"Refresh","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"_data","type":"DataTree","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Handles the access and persistence of game options. Synchronizes with [GameOptions].\n","detail":null}},{"visibility":"public","name":"UiNewGame","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiNewGame","params":"(WindowFramework*, Rocket::Core::Context*)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiNewGame","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SelectedProfile","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"ClickedStartFromScratch","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GoToPreviousProfile","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GoToNextProfile","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GoToProfile","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"GoCancel","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"StartFromScratch","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"SelectProfile","type":"Sync::Signal<void (const std::string&)>","attrs":0,"visibility":"public","doc":null},{"name":"Cancel","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"PreviousProfile,","type":"RocketListener","attrs":0,"visibility":"private","doc":null},{"name":"_data_profiles","type":"DataTree","attrs":1,"visibility":"private","doc":null},{"name":"_profiles","type":"std::vector<std::string>","attrs":0,"visibility":"private","doc":null},{"name":"_current_profile","type":"std::vector<std::string>::const_iterator","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for starting a new game.\n","detail":null}},{"visibility":"public","name":"NewGameTask","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"NewGameTask","params":"(WindowFramework*, Rocket::Core::Context*)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~NewGameTask","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SelectProfile","params":"(const std::string&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"StartFromScratch","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"Done","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"StartGame","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"Cancel","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":null},{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_rocket","type":"Rocket::Core::Context","attrs":1,"visibility":"private","doc":null},{"name":"_ui_new_game","type":"UiNewGame","attrs":0,"visibility":"private","doc":null},{"name":"_stat_view","type":"StatViewRocket","attrs":1,"visibility":"private","doc":null},{"name":"_stat_controller","type":"StatController","attrs":1,"visibility":"private","doc":null},{"name":"_stat_sheet","type":"DataTree","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Task executed when the player is starting a new game.\n","detail":null}},{"visibility":"private","name":"MainMenu::View","decl":"struct","file":"include/mainmenu.hpp","namespaces":["MainMenu"],"constructors":[],"methods":[{"name":"View","params":"(WindowFramework* window, Rocket::Core::Context* context)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"Continue","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"NewGame","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"Quit","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"LoadGame","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"Options","type":"Sync::Signal<void (Rocket::Core::Event&)>","attrs":0,"visibility":"public","doc":null},{"name":"NewGameClicked,","type":"RocketListener","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for the MainMenu.\n","detail":null}},{"visibility":"public","name":"MainMenu","decl":"class","file":"include/mainmenu.hpp","namespaces":[],"constructors":[],"methods":[{"name":"MainMenu","params":"(WindowFramework* window)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~MainMenu","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"Continue","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"EndGame","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"NewGame","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"StartGame","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"CancelNewGame","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"do_task","params":"(void)","attrs":0,"return_type":"DoneStatus","visibility":"public","return_attrs":0,"doc":null},{"name":"AsyncCreateLevel","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"QuitGame","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"OpenUiLoad","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"LoadSlot","params":"(unsigned char slot)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"DisplayAlerts","params":"(void)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_window","type":"WindowFramework","attrs":1,"visibility":"private","doc":null},{"name":"_generalUi","type":"GeneralUi","attrs":0,"visibility":"private","doc":null},{"name":"_mouseCursor","type":"MouseCursor","attrs":0,"visibility":"private","doc":null},{"name":"_new_game_task","type":"NewGameTask","attrs":1,"visibility":"private","doc":null},{"name":"_levelTask","type":"GameTask","attrs":1,"visibility":"private","doc":null},{"name":"_view","type":"View","attrs":0,"visibility":"private","doc":null},{"name":"_alerts","type":"Alerts","attrs":0,"visibility":"private","doc":null},{"name":"_uiLoad","type":"UiLoad","attrs":1,"visibility":"private","doc":null},{"name":"_need_garbage_collect","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"quitGamePlz","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"createLevelPlz","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"slotToLoadPlz","type":"short","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"AsyncTask"}],"doc":{"overview":"Top-level task of the whole game. Handles the main menu and the proper execution of the sub tasks.\n","detail":null}},{"visibility":"public","name":"AstarPathfinding::Node","decl":"struct","file":"include/astar.hpp","namespaces":["AstarPathfinding"],"constructors":[],"methods":[{"name":"Node","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"parent","type":"Node","attrs":1,"visibility":"public","doc":null},{"name":"child","type":"Node","attrs":1,"visibility":"public","doc":null},{"name":"g","type":"float","attrs":0,"visibility":"public","doc":null},{"name":"h","type":"float","attrs":0,"visibility":"public","doc":null},{"name":"f","type":"float","attrs":0,"visibility":"public","doc":null},{"name":"userNode","type":"UserState","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"AstarPathfinding::FunctorCompareNode","decl":"struct","file":"include/astar.hpp","namespaces":["AstarPathfinding"],"constructors":[],"methods":[{"name":"operator","params":"( const Node *x, const Node *y )","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"AstarPathfinding","decl":"class","file":"include/astar.hpp","namespaces":[],"constructors":[],"methods":[{"name":"AstarPathfinding","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~AstarPathfinding","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"CancelSearch","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SetStartAndGoalStates","params":"( UserState &Start, UserState &Goal )","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SearchSuccedded","params":"(Node* node)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"SearchStep","params":"()","attrs":0,"return_type":"State","visibility":"public","return_attrs":0,"doc":null},{"name":"FreeSolutionNodes","params":"()","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"GetSolution","params":"(void)","attrs":0,"return_type":"std::list<UserState>","visibility":"public","return_attrs":0,"doc":null},{"name":"GetStepCount","params":"()","attrs":0,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"FreeAllNodes","params":"()","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"FreeUnusedNodes","params":"(bool onlyUnused = true)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null},{"name":"PedirNode","params":"(void)","attrs":0,"return_type":"Node","visibility":"private","return_attrs":33,"doc":null},{"name":"ReleaseNode","params":"(Node* node)","attrs":0,"return_type":"void","visibility":"private","return_attrs":32,"doc":null}],"attributes":[{"name":"_openList","type":"NodeList","attrs":0,"visibility":"private","doc":null},{"name":"_closedList","type":"NodeList","attrs":0,"visibility":"private","doc":null},{"name":"_state","type":"State","attrs":0,"visibility":"private","doc":null},{"name":"_cancelRequest","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_nSteps","type":"int","attrs":0,"visibility":"private","doc":null},{"name":"_start","type":"Node","attrs":1,"visibility":"private","doc":null},{"name":"_goal","type":"Node","attrs":1,"visibility":"private","doc":null},{"name":"_allocateNodeIt","type":"int","attrs":8,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"private","name":"Quest::WatcherInitializer","decl":"struct","file":"include/quest_manager.hpp","namespaces":["Quest"],"constructors":[],"methods":[],"attributes":[{"name":"key","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"method","type":"WatcherInitializerMethod","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":null},{"visibility":"public","name":"Quest","decl":"class","file":"include/quest_manager.hpp","namespaces":[],"constructors":[],"methods":[{"name":"operator==","params":"(const std::string& key)","attrs":4,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"operator==","short":"Compares the [std::string] parameter to the quest's name"}},{"name":"Initialize","params":"(Level* level)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Initialize"}},{"name":"Finalize","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Finalize"}},{"name":"GetData","params":"(void)","attrs":0,"return_type":"Data","visibility":"public","return_attrs":0,"doc":{"name":"GetData"}},{"name":"CompleteCondition","params":"(const std::string& objective, const std::string& condition)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"CompleteCondition","short":"Forces a condition status to 'complete'"}},{"name":"IsConditionCompleted","params":"(const std::string& objective, const std::string& condition)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"IsConditionCompleted","short":"Returns true if a condition's status is set to 'complete'"}},{"name":"IsOver","params":"(void)","attrs":0,"return_type":"bool","visibility":"public","return_attrs":0,"doc":{"name":"IsOver","short":"Returns true if all the conditions are completed"}},{"name":"CheckIfCompleted","params":"(void)","attrs":0,"return_type":"bool","visibility":"private","return_attrs":0,"doc":{"name":"CheckIfCompleted","short":"Returns true if the corresponding condition is completed"}},{"name":"InitializeCondition","params":"(Data condition, Level* level)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"InitializeCondition","short":"Sets up the level observers for a condition"}},{"name":"WatcherCharacterInventory","params":"(Data condition, Level* level)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"WatcherCharacterInventory","short":"Sets up an inventory observer"}},{"name":"WatcherCharacterKill","params":"(Data condition, Level* level)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"WatcherCharacterKill","short":"Sets up a character obvserver"}},{"name":"WatcherTime","params":"(Data condition, Level* level)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":{"name":"WatcherTime","short":"Sets up a game-time observer"}}],"attributes":[{"name":"data","type":"Data","attrs":0,"visibility":"public","doc":{"name":"data","short":"Reference to the [Data] passed as constructor parameter."}},{"name":"ObjectiveCompleted","type":"Sync::Signal<void (Data)>","attrs":0,"visibility":"public","doc":{"name":"observers","short":"Handle for the quest event observers set up when a [Level] is created."}},{"name":"QuestCompleted","type":"Sync::Signal<void (Quest*)>","attrs":0,"visibility":"public","doc":{"name":"_update_hook","short":"If a script has been specified for the quest, points to the corresponding AngelScript function"}},{"name":"_observers","type":"Sync::ObserverHandler","attrs":0,"visibility":"private","doc":null},{"name":"_updating","type":"bool","attrs":0,"visibility":"private","doc":null},{"name":"_update_hook","type":"asIScriptFunction","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"private","type":"Scriptable"}],"doc":{"overview":"Instance of a Quest that the character is following or has already finished.\n","detail":null}},{"visibility":"public","name":"QuestManager","decl":"class","file":"include/quest_manager.hpp","namespaces":[],"constructors":[],"methods":[{"name":"QuestManager","params":"(DataEngine& de, StatController* player_controller)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"operator[]","short":"Fetches a quest by name. Returns zero if none are found"}},{"name":"~QuestManager","params":"()","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":{"name":"AddQuest","short":"Creates a [Quest] object and adds it to the _quests list","desc":"See the [Quest] object for description of the [Data] structure that must be\npassed as parameter.\n"}},{"name":"operator[]","params":"(const std::string& key)","attrs":0,"return_type":"Quest","visibility":"public","return_attrs":1,"doc":{"name":"Initialize","short":"Setup the quest events observers when a [Level] is created."}},{"name":"AddQuest","params":"(Data)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Finalize","short":"Cleans up the quest events observers when a [Level] is destroyed."}},{"name":"Initialize","params":"(Level* level)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"QuestCompleted","short":"Completes a quest and trigger the corresponding events.","desc":"Sets the quest's 'complete' variable to 1.<br />\nAdds experience to the player corresponding to the amount indicated by the quest's 'reward' variable<br />\nPlays the 'questdone' sound.\n"}},{"name":"Finalize","params":"(void)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"QuestCompleted","params":"(Quest*)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"QuestsUpdated","type":"Sync::Signal<void>","attrs":0,"visibility":"public","doc":{"name":"_data_engine"}},{"name":"QuestUpdated","type":"Sync::Signal<void (Quest*)>","attrs":0,"visibility":"public","doc":{"name":"_quests","short":"List of on-going and finished quests"}},{"name":"_data_engine","type":"DataEngine","attrs":2,"visibility":"private","doc":{"name":"_stats_controller","short":"The player's [StatController]"}},{"name":"_quests","type":"Quests","attrs":0,"visibility":"private","doc":{"name":"_level"}},{"name":"_stats_controller","type":"StatController","attrs":1,"visibility":"private","doc":null},{"name":"_level","type":"Level","attrs":1,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"This class is the backend for quest managing. It can be used to add or access quests during the game. At level starts,\nthis class is responsible for watching game events: it must find out whenever an objective is fulfilled, and execute\nthe corresponding script hooks.\n","detail":null}},{"visibility":"public","name":"Dices","decl":"struct","file":"include/dices.hpp","namespaces":[],"constructors":[],"methods":[{"name":"Initialize","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"Throw","params":"(unsigned int max)","attrs":16,"return_type":"int","visibility":"public","return_attrs":0,"doc":null},{"name":"Test","params":"(int successPercentage)","attrs":16,"return_type":"bool","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Abstraction for random operations.\n","detail":null}},{"visibility":"public","name":"Executor","decl":"class","file":"include/executor.hpp","namespaces":[],"constructors":[],"methods":[{"name":"ExecuteLater","params":"(std::function<void (void)> lambda)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"ExecuteLater","short":"Will execute the lambda sent as a parameter at the end of the next loop turn.","desc":"Though it can be used for many things, this class is mainly aimed at garbage collecting, allowing differed deletion of objects."}},{"name":"Run","params":"(void)","attrs":16,"return_type":"void","visibility":"public","return_attrs":0,"doc":{"name":"Run","short":"Is run every loop turn execute and flush all the lambdas added via ExecuteLater"}}],"attributes":[{"name":"_lambdas","type":"Lambdas","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Singleton for executing lambdas asynchronously\n","detail":null}},{"visibility":"private","name":"UiDialog::Button","decl":"struct","file":"include/ui_dialog.hpp","namespaces":["UiDialog"],"constructors":[],"methods":[{"name":"Button","params":"(std::string id)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null}],"attributes":[{"name":"id","type":"std::string","attrs":0,"visibility":"public","doc":null},{"name":"listener","type":"RocketListener","attrs":0,"visibility":"public","doc":null}],"enums":[],"typedefs":[],"ancestors":[],"doc":{"overview":"Button representing a choice for the [UiDialog] object.\n","detail":null}},{"visibility":"public","name":"UiDialog","decl":"class","file":"include/ui_dialog.hpp","namespaces":[],"constructors":[],"methods":[{"name":"UiDialog","params":"(WindowFramework* w, Rocket::Core::Context* c)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"~UiDialog","params":"(void)","attrs":0,"return_type":null,"visibility":"public","return_attrs":0,"doc":null},{"name":"SetMessage","params":"(const std::string& message)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"AddChoice","params":"(const std::string& name, std::function<void (Rocket::Core::Event&)> callback)","attrs":0,"return_type":"void","visibility":"public","return_attrs":0,"doc":null},{"name":"PickedChoice","params":"(Rocket::Core::Event&)","attrs":0,"return_type":"void","visibility":"private","return_attrs":0,"doc":null}],"attributes":[{"name":"_button_container","type":"Rocket::Core::Element","attrs":1,"visibility":"private","doc":null},{"name":"_buttons","type":"Buttons","attrs":0,"visibility":"private","doc":null}],"enums":[],"typedefs":[],"ancestors":[{"visibility":"public","type":"UiBase"}],"doc":{"overview":"UI for prompting the player to pick a decision from a list.\n","detail":null}},{"name":null,"decl":"namespace","file":"include/level/world.h","namespaces":[],"constructors":[],"methods":[{"name":"humanize","params":"(const std::string&)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"underscore","params":"(const std::string&)","attrs":0,"return_type":"std::string","visibility":"public","return_attrs":0,"doc":null},{"name":"my_sqrt","params":"(const float x)","attrs":0,"return_type":"float","visibility":"public","return_attrs":0,"doc":null}],"attributes":[],"enums":[],"typedefs":[],"ancestors":null,"doc":null}]};